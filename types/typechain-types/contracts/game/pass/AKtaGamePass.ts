/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Coordinates {
  export type CoordinateStruct = {
    _x: PromiseOrValue<BigNumberish>;
    _y: PromiseOrValue<BigNumberish>;
  };

  export type CoordinateStructOutput = [BigNumber, BigNumber] & {
    _x: BigNumber;
    _y: BigNumber;
  };
}

export declare namespace IKillThemAll {
  export type UserTownInfoStruct = {
    townId: PromiseOrValue<BigNumberish>;
    joinBlock: PromiseOrValue<BigNumberish>;
  };

  export type UserTownInfoStructOutput = [BigNumber, BigNumber] & {
    townId: BigNumber;
    joinBlock: BigNumber;
  };

  export type UserTimerStruct = {
    getHealth: Timers.BlockNumberStruct;
    getMana: Timers.BlockNumberStruct;
    getEnergy: Timers.BlockNumberStruct;
    revive: Timers.BlockNumberStruct;
    teleport: Timers.BlockNumberStruct;
    teleportToTown: Timers.BlockNumberStruct;
    prepareToAttack: Timers.BlockNumberStruct;
  };

  export type UserTimerStructOutput = [
    Timers.BlockNumberStructOutput,
    Timers.BlockNumberStructOutput,
    Timers.BlockNumberStructOutput,
    Timers.BlockNumberStructOutput,
    Timers.BlockNumberStructOutput,
    Timers.BlockNumberStructOutput,
    Timers.BlockNumberStructOutput
  ] & {
    getHealth: Timers.BlockNumberStructOutput;
    getMana: Timers.BlockNumberStructOutput;
    getEnergy: Timers.BlockNumberStructOutput;
    revive: Timers.BlockNumberStructOutput;
    teleport: Timers.BlockNumberStructOutput;
    teleportToTown: Timers.BlockNumberStructOutput;
    prepareToAttack: Timers.BlockNumberStructOutput;
  };

  export type UserCharPointStruct = {
    attack: PromiseOrValue<BigNumberish>;
    defend: PromiseOrValue<BigNumberish>;
  };

  export type UserCharPointStructOutput = [BigNumber, BigNumber] & {
    attack: BigNumber;
    defend: BigNumber;
  };
}

export declare namespace Timers {
  export type BlockNumberStruct = { _at: PromiseOrValue<BigNumberish> };

  export type BlockNumberStructOutput = [BigNumber] & { _at: BigNumber };
}

export interface AKtaGamePassInterface extends utils.Interface {
  functions: {
    "claim(uint256)": FunctionFragment;
    "userByAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "claim" | "userByAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userByAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userByAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AKtaGamePass extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AKtaGamePassInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        Coordinates.CoordinateStructOutput,
        string,
        BigNumber,
        BigNumber,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: BigNumber;
        mana: BigNumber;
        energy: BigNumber;
        armor: BigNumber;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: BigNumber;
        levelId: BigNumber;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    >;
  };

  claim(
    phase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userByAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      Coordinates.CoordinateStructOutput,
      string,
      BigNumber,
      BigNumber,
      string,
      IKillThemAll.UserTownInfoStructOutput,
      IKillThemAll.UserTimerStructOutput,
      IKillThemAll.UserCharPointStructOutput
    ] & {
      health: BigNumber;
      mana: BigNumber;
      energy: BigNumber;
      armor: BigNumber;
      coordinate: Coordinates.CoordinateStructOutput;
      name: string;
      exp: BigNumber;
      levelId: BigNumber;
      referrer: string;
      townInfo: IKillThemAll.UserTownInfoStructOutput;
      timer: IKillThemAll.UserTimerStructOutput;
      charPoint: IKillThemAll.UserCharPointStructOutput;
    }
  >;

  callStatic: {
    claim(
      phase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        Coordinates.CoordinateStructOutput,
        string,
        BigNumber,
        BigNumber,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: BigNumber;
        mana: BigNumber;
        energy: BigNumber;
        armor: BigNumber;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: BigNumber;
        levelId: BigNumber;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    >;
  };

  filters: {};

  estimateGas: {
    claim(
      phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
