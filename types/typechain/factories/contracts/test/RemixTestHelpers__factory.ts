/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RemixTestHelpers,
  RemixTestHelpersInterface,
} from "../../../contracts/test/RemixTestHelpers";

const _abi = [
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "passNextBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460145760a3908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c90816342cbb15c146051575063aaeca8b114603457600080fd5b34604e5780600319360112604e5760018154018155604051f35b80fd5b90503460695781600319360112606957602090438152f35b5080fdfea26469706673582212202e351995f6e3be7c11ee1cdba1f479094254be8e0aa82f724b957ee16e21546864736f6c63430008100033";

type RemixTestHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RemixTestHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RemixTestHelpers__factory extends ContractFactory {
  constructor(...args: RemixTestHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RemixTestHelpers> {
    return super.deploy(overrides || {}) as Promise<RemixTestHelpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RemixTestHelpers {
    return super.attach(address) as RemixTestHelpers;
  }
  override connect(signer: Signer): RemixTestHelpers__factory {
    return super.connect(signer) as RemixTestHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RemixTestHelpersInterface {
    return new utils.Interface(_abi) as RemixTestHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RemixTestHelpers {
    return new Contract(address, _abi, signerOrProvider) as RemixTestHelpers;
  }
}
