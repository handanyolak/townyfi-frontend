/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IKillThemAll {
  export type MaxSettingStruct = {
    health: BigNumberish;
    mana: BigNumberish;
    energy: BigNumberish;
    armor: BigNumberish;
    teleportDistance: BigNumberish;
    killArmorRewardLimit: BigNumberish;
    safeTownDistance: BigNumberish;
    safeTownDifference: BigNumberish;
    safeZoneDistance: BigNumberish;
    safeZoneDifference: BigNumberish;
    attackDistance: BigNumberish;
    levelDifference: BigNumberish;
  };

  export type MaxSettingStructOutput = [
    health: bigint,
    mana: bigint,
    energy: bigint,
    armor: bigint,
    teleportDistance: bigint,
    killArmorRewardLimit: bigint,
    safeTownDistance: bigint,
    safeTownDifference: bigint,
    safeZoneDistance: bigint,
    safeZoneDifference: bigint,
    attackDistance: bigint,
    levelDifference: bigint
  ] & {
    health: bigint;
    mana: bigint;
    energy: bigint;
    armor: bigint;
    teleportDistance: bigint;
    killArmorRewardLimit: bigint;
    safeTownDistance: bigint;
    safeTownDifference: bigint;
    safeZoneDistance: bigint;
    safeZoneDifference: bigint;
    attackDistance: bigint;
    levelDifference: bigint;
  };

  export type PriceSettingStruct = {
    health: BigNumberish;
    mana: BigNumberish;
    energy: BigNumberish;
    armor: BigNumberish;
    revive: BigNumberish;
    register: BigNumberish;
    teleport: BigNumberish;
    createTown: BigNumberish;
    settleTown: BigNumberish;
    teleportToTown: BigNumberish;
    prepareAttack: BigNumberish;
    prepareDefend: BigNumberish;
  };

  export type PriceSettingStructOutput = [
    health: bigint,
    mana: bigint,
    energy: bigint,
    armor: bigint,
    revive: bigint,
    register: bigint,
    teleport: bigint,
    createTown: bigint,
    settleTown: bigint,
    teleportToTown: bigint,
    prepareAttack: bigint,
    prepareDefend: bigint
  ] & {
    health: bigint;
    mana: bigint;
    energy: bigint;
    armor: bigint;
    revive: bigint;
    register: bigint;
    teleport: bigint;
    createTown: bigint;
    settleTown: bigint;
    teleportToTown: bigint;
    prepareAttack: bigint;
    prepareDefend: bigint;
  };

  export type RateSettingStruct = {
    getHealth: BigNumberish;
    getMana: BigNumberish;
    getEnergy: BigNumberish;
    registerReferralReward: BigNumberish;
    armorAbsorption: BigNumberish;
    attack: BigNumberish;
    movement: BigNumberish;
  };

  export type RateSettingStructOutput = [
    getHealth: bigint,
    getMana: bigint,
    getEnergy: bigint,
    registerReferralReward: bigint,
    armorAbsorption: bigint,
    attack: bigint,
    movement: bigint
  ] & {
    getHealth: bigint;
    getMana: bigint;
    getEnergy: bigint;
    registerReferralReward: bigint;
    armorAbsorption: bigint;
    attack: bigint;
    movement: bigint;
  };

  export type TimeSettingStruct = {
    revive: BigNumberish;
    teleport: BigNumberish;
    teleportToTown: BigNumberish;
    attackableAt: BigNumberish;
    warExpiredAt: BigNumberish;
    protectionAt: BigNumberish;
    prepareToAttack: BigNumberish;
  };

  export type TimeSettingStructOutput = [
    revive: bigint,
    teleport: bigint,
    teleportToTown: bigint,
    attackableAt: bigint,
    warExpiredAt: bigint,
    protectionAt: bigint,
    prepareToAttack: bigint
  ] & {
    revive: bigint;
    teleport: bigint;
    teleportToTown: bigint;
    attackableAt: bigint;
    warExpiredAt: bigint;
    protectionAt: bigint;
    prepareToAttack: bigint;
  };

  export type MinSettingStruct = {
    levelToCreateTown: BigNumberish;
    townAreaRadius: BigNumberish;
  };

  export type MinSettingStructOutput = [
    levelToCreateTown: bigint,
    townAreaRadius: bigint
  ] & { levelToCreateTown: bigint; townAreaRadius: bigint };

  export type ExpSettingStruct = {
    kill: BigNumberish;
    referrerKill: BigNumberish;
  };

  export type ExpSettingStructOutput = [kill: bigint, referrerKill: bigint] & {
    kill: bigint;
    referrerKill: bigint;
  };

  export type MultiplierSettingStruct = {
    attack: BigNumberish;
    resistance: BigNumberish;
  };

  export type MultiplierSettingStructOutput = [
    attack: bigint,
    resistance: bigint
  ] & { attack: bigint; resistance: bigint };

  export type SettingStruct = {
    max: IKillThemAll.MaxSettingStruct;
    price: IKillThemAll.PriceSettingStruct;
    rate: IKillThemAll.RateSettingStruct;
    time: IKillThemAll.TimeSettingStruct;
    min: IKillThemAll.MinSettingStruct;
    exp: IKillThemAll.ExpSettingStruct;
    multiplier: IKillThemAll.MultiplierSettingStruct;
    numberDigits: BigNumberish;
  };

  export type SettingStructOutput = [
    max: IKillThemAll.MaxSettingStructOutput,
    price: IKillThemAll.PriceSettingStructOutput,
    rate: IKillThemAll.RateSettingStructOutput,
    time: IKillThemAll.TimeSettingStructOutput,
    min: IKillThemAll.MinSettingStructOutput,
    exp: IKillThemAll.ExpSettingStructOutput,
    multiplier: IKillThemAll.MultiplierSettingStructOutput,
    numberDigits: bigint
  ] & {
    max: IKillThemAll.MaxSettingStructOutput;
    price: IKillThemAll.PriceSettingStructOutput;
    rate: IKillThemAll.RateSettingStructOutput;
    time: IKillThemAll.TimeSettingStructOutput;
    min: IKillThemAll.MinSettingStructOutput;
    exp: IKillThemAll.ExpSettingStructOutput;
    multiplier: IKillThemAll.MultiplierSettingStructOutput;
    numberDigits: bigint;
  };

  export type UserLevelStruct = { min: BigNumberish; max: BigNumberish };

  export type UserLevelStructOutput = [min: bigint, max: bigint] & {
    min: bigint;
    max: bigint;
  };

  export type TownLevelStruct = { maxUser: BigNumberish };

  export type TownLevelStructOutput = [maxUser: bigint] & { maxUser: bigint };

  export type WarStruct = {
    attackerTownId: BigNumberish;
    defenderTownId: BigNumberish;
    attackableAt: Timers.BlockNumberStruct;
    expiredAt: Timers.BlockNumberStruct;
  };

  export type WarStructOutput = [
    attackerTownId: bigint,
    defenderTownId: bigint,
    attackableAt: Timers.BlockNumberStructOutput,
    expiredAt: Timers.BlockNumberStructOutput
  ] & {
    attackerTownId: bigint;
    defenderTownId: bigint;
    attackableAt: Timers.BlockNumberStructOutput;
    expiredAt: Timers.BlockNumberStructOutput;
  };

  export type GamePassStruct = {
    pass: AddressLike;
    price: BigNumberish;
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    phaseLimits: BigNumberish[];
  };

  export type GamePassStructOutput = [
    pass: string,
    price: bigint,
    startBlock: bigint,
    endBlock: bigint,
    phaseLimits: bigint[]
  ] & {
    pass: string;
    price: bigint;
    startBlock: bigint;
    endBlock: bigint;
    phaseLimits: bigint[];
  };

  export type TownStruct = {
    coordinate: Coordinates.CoordinateStruct;
    name: BytesLike;
    leader: AddressLike;
    citizens: AddressLike[];
    exp: BigNumberish;
    levelId: BigNumberish;
    price: BigNumberish;
    recruitment: boolean;
    status: BigNumberish;
    mode: BigNumberish;
    protectionAt: Timers.BlockNumberStruct;
  };

  export type TownStructOutput = [
    coordinate: Coordinates.CoordinateStructOutput,
    name: string,
    leader: string,
    citizens: string[],
    exp: bigint,
    levelId: bigint,
    price: bigint,
    recruitment: boolean,
    status: bigint,
    mode: bigint,
    protectionAt: Timers.BlockNumberStructOutput
  ] & {
    coordinate: Coordinates.CoordinateStructOutput;
    name: string;
    leader: string;
    citizens: string[];
    exp: bigint;
    levelId: bigint;
    price: bigint;
    recruitment: boolean;
    status: bigint;
    mode: bigint;
    protectionAt: Timers.BlockNumberStructOutput;
  };

  export type UserTownInfoStruct = {
    townId: BigNumberish;
    joinBlock: BigNumberish;
  };

  export type UserTownInfoStructOutput = [townId: bigint, joinBlock: bigint] & {
    townId: bigint;
    joinBlock: bigint;
  };

  export type UserTimerStruct = {
    getHealth: Timers.BlockNumberStruct;
    getMana: Timers.BlockNumberStruct;
    getEnergy: Timers.BlockNumberStruct;
    revive: Timers.BlockNumberStruct;
    teleport: Timers.BlockNumberStruct;
    teleportToTown: Timers.BlockNumberStruct;
    prepareToAttack: Timers.BlockNumberStruct;
  };

  export type UserTimerStructOutput = [
    getHealth: Timers.BlockNumberStructOutput,
    getMana: Timers.BlockNumberStructOutput,
    getEnergy: Timers.BlockNumberStructOutput,
    revive: Timers.BlockNumberStructOutput,
    teleport: Timers.BlockNumberStructOutput,
    teleportToTown: Timers.BlockNumberStructOutput,
    prepareToAttack: Timers.BlockNumberStructOutput
  ] & {
    getHealth: Timers.BlockNumberStructOutput;
    getMana: Timers.BlockNumberStructOutput;
    getEnergy: Timers.BlockNumberStructOutput;
    revive: Timers.BlockNumberStructOutput;
    teleport: Timers.BlockNumberStructOutput;
    teleportToTown: Timers.BlockNumberStructOutput;
    prepareToAttack: Timers.BlockNumberStructOutput;
  };

  export type UserCharPointStruct = {
    attack: BigNumberish;
    defend: BigNumberish;
  };

  export type UserCharPointStructOutput = [attack: bigint, defend: bigint] & {
    attack: bigint;
    defend: bigint;
  };

  export type UserStruct = {
    health: BigNumberish;
    mana: BigNumberish;
    energy: BigNumberish;
    armor: BigNumberish;
    coordinate: Coordinates.CoordinateStruct;
    name: BytesLike;
    exp: BigNumberish;
    levelId: BigNumberish;
    referrer: AddressLike;
    townInfo: IKillThemAll.UserTownInfoStruct;
    timer: IKillThemAll.UserTimerStruct;
    charPoint: IKillThemAll.UserCharPointStruct;
  };

  export type UserStructOutput = [
    health: bigint,
    mana: bigint,
    energy: bigint,
    armor: bigint,
    coordinate: Coordinates.CoordinateStructOutput,
    name: string,
    exp: bigint,
    levelId: bigint,
    referrer: string,
    townInfo: IKillThemAll.UserTownInfoStructOutput,
    timer: IKillThemAll.UserTimerStructOutput,
    charPoint: IKillThemAll.UserCharPointStructOutput
  ] & {
    health: bigint;
    mana: bigint;
    energy: bigint;
    armor: bigint;
    coordinate: Coordinates.CoordinateStructOutput;
    name: string;
    exp: bigint;
    levelId: bigint;
    referrer: string;
    townInfo: IKillThemAll.UserTownInfoStructOutput;
    timer: IKillThemAll.UserTimerStructOutput;
    charPoint: IKillThemAll.UserCharPointStructOutput;
  };
}

export declare namespace Coordinates {
  export type CoordinateStruct = { _x: BigNumberish; _y: BigNumberish };

  export type CoordinateStructOutput = [_x: bigint, _y: bigint] & {
    _x: bigint;
    _y: bigint;
  };
}

export declare namespace Timers {
  export type BlockNumberStruct = { _at: BigNumberish };

  export type BlockNumberStructOutput = [_at: bigint] & { _at: bigint };
}

export interface KillThemAllInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addGamePass"
      | "addGamePass((address,uint256,uint256,uint256,uint256[]))"
      | "attack"
      | "attack(address)"
      | "buy"
      | "buy(uint8,address,uint256)"
      | "buyGamePass"
      | "buyGamePass()"
      | "changeName"
      | "changeName(bytes32)"
      | "changeTownRecruitment"
      | "changeTownRecruitment()"
      | "claimGamePassReward"
      | "claimGamePassReward(uint256)"
      | "createTown"
      | "createTown(bytes32,uint256)"
      | "createTownLevel"
      | "createTownLevel((uint256))"
      | "createUserLevel"
      | "createUserLevel((uint256,uint256))"
      | "declareWar"
      | "declareWar(uint256)"
      | "exileCitizen"
      | "exileCitizen(address)"
      | "gamePasses"
      | "gamePasses(uint256)"
      | "get"
      | "get(uint8)"
      | "getAddressesByCoordinate"
      | "getAddressesByCoordinate((int64,int64))"
      | "getCitizensByTownId"
      | "getCitizensByTownId(uint256)"
      | "isRegistered"
      | "isRegistered(address)"
      | "isUserClaimedGamePassPhase"
      | "isUserClaimedGamePassPhase(address,uint256,uint256)"
      | "joinTown"
      | "joinTown(uint256)"
      | "leaveTown"
      | "leaveTown()"
      | "move"
      | "move(uint8)"
      | "owner"
      | "owner()"
      | "prepareToConditionBonus"
      | "prepareToConditionBonus(uint8,address)"
      | "register"
      | "register(bytes32,address)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "revive"
      | "revive()"
      | "setConditionBonus"
      | "setConditionBonus(uint8,bytes32,uint256)"
      | "settings"
      | "settings()"
      | "settleTown"
      | "settleTown()"
      | "teleport"
      | "teleport((int64,int64))"
      | "teleportToTown"
      | "teleportToTown()"
      | "townById"
      | "townById(uint256)"
      | "townIdByCoordinate"
      | "townIdByCoordinate(int256,int256)"
      | "townWar"
      | "townWar()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "typechainGenerateTown"
      | "typechainGenerateTown(((int64,int64),bytes32,address,address[],uint256,uint256,uint256,bool,uint8,uint8,(uint256)))"
      | "typechainGenerateUser"
      | "typechainGenerateUser((uint256,uint256,uint256,uint256,(int64,int64),bytes32,uint256,uint256,address,(uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint256)))"
      | "updateSettings"
      | "updateSettings(((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256))"
      | "upgradeCharacter"
      | "upgradeCharacter(uint8,uint256)"
      | "userByAddr"
      | "userByAddr(address)"
      | "voyageTown"
      | "voyageTown()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LevelUp"
      | "LevelUp(address)"
      | "OwnershipTransferred"
      | "OwnershipTransferred(address,address)"
      | "TownCreated"
      | "TownCreated()"
      | "TownDisbanded"
      | "TownDisbanded(uint256)"
      | "TownRecruitmentUpdated"
      | "TownRecruitmentUpdated()"
      | "TownSettled"
      | "TownSettled()"
      | "TownVoyaged"
      | "TownVoyaged()"
      | "UserArmorBroken"
      | "UserArmorBroken()"
      | "UserAttacked"
      | "UserAttacked(address,uint256,uint256)"
      | "UserBought"
      | "UserBought(uint8,address,uint256,address)"
      | "UserBoughtGamePass"
      | "UserBoughtGamePass(uint256)"
      | "UserClaimedGamePassPhase"
      | "UserClaimedGamePassPhase(uint256,uint256)"
      | "UserExitFromTown"
      | "UserExitFromTown(address)"
      | "UserGot"
      | "UserGot(uint8,uint256)"
      | "UserJoinedTown"
      | "UserJoinedTown()"
      | "UserKilled"
      | "UserKilled(address)"
      | "UserMissed"
      | "UserMissed()"
      | "UserMoved"
      | "UserMoved(address,tuple,tuple)"
      | "UserPrepared"
      | "UserPrepared(uint8,bytes32)"
      | "UserRegistered"
      | "UserRegistered()"
      | "WarDeclared"
      | "WarDeclared(tuple)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addGamePass",
    values: [IKillThemAll.GamePassStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addGamePass((address,uint256,uint256,uint256,uint256[]))",
    values: [IKillThemAll.GamePassStruct]
  ): string;
  encodeFunctionData(functionFragment: "attack", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "attack(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy(uint8,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyGamePass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyGamePass()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeName(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTownRecruitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTownRecruitment()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimGamePassReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGamePassReward(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTown",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTown(bytes32,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTownLevel",
    values: [IKillThemAll.TownLevelStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createTownLevel((uint256))",
    values: [IKillThemAll.TownLevelStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserLevel",
    values: [IKillThemAll.UserLevelStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserLevel((uint256,uint256))",
    values: [IKillThemAll.UserLevelStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWar(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exileCitizen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exileCitizen(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gamePasses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gamePasses(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "get(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesByCoordinate",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesByCoordinate((int64,int64))",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCitizensByTownId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCitizensByTownId(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserClaimedGamePassPhase",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserClaimedGamePassPhase(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTown(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "leaveTown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "leaveTown()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "move", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "move(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareToConditionBonus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareToConditionBonus(uint8,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revive", values?: undefined): string;
  encodeFunctionData(functionFragment: "revive()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConditionBonus",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConditionBonus(uint8,bytes32,uint256)",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settings()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleTown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleTown()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teleport",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "teleport((int64,int64))",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "teleportToTown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teleportToTown()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "townById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "townById(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "townIdByCoordinate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "townIdByCoordinate(int256,int256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "townWar", values?: undefined): string;
  encodeFunctionData(functionFragment: "townWar()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typechainGenerateTown",
    values: [IKillThemAll.TownStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "typechainGenerateTown(((int64,int64),bytes32,address,address[],uint256,uint256,uint256,bool,uint8,uint8,(uint256)))",
    values: [IKillThemAll.TownStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "typechainGenerateUser",
    values: [IKillThemAll.UserStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "typechainGenerateUser((uint256,uint256,uint256,uint256,(int64,int64),bytes32,uint256,uint256,address,(uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint256)))",
    values: [IKillThemAll.UserStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [IKillThemAll.SettingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings(((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256))",
    values: [IKillThemAll.SettingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCharacter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCharacter(uint8,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userByAddr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userByAddr(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voyageTown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voyageTown()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addGamePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGamePass((address,uint256,uint256,uint256,uint256[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attack(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buy(uint8,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyGamePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyGamePass()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeName(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTownRecruitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTownRecruitment()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGamePassReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGamePassReward(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTown(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTownLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTownLevel((uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserLevel((uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "declareWar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declareWar(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exileCitizen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exileCitizen(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gamePasses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gamePasses(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get(uint8)", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesByCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesByCoordinate((int64,int64))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCitizensByTownId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCitizensByTownId(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserClaimedGamePassPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserClaimedGamePassPhase(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinTown(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leaveTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaveTown()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "move(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareToConditionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareToConditionBonus(uint8,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "register(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revive()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConditionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConditionBonus(uint8,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleTown()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teleport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teleport((int64,int64))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teleportToTown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teleportToTown()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "townById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "townById(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "townIdByCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "townIdByCoordinate(int256,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "townWar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "townWar()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typechainGenerateTown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typechainGenerateTown(((int64,int64),bytes32,address,address[],uint256,uint256,uint256,bool,uint8,uint8,(uint256)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typechainGenerateUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typechainGenerateUser((uint256,uint256,uint256,uint256,(int64,int64),bytes32,uint256,uint256,address,(uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint256)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings(((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCharacter(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userByAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userByAddr(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voyageTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voyageTown()",
    data: BytesLike
  ): Result;
}

export namespace LevelUpEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownCreatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownDisbandedEvent {
  export type InputTuple = [townId: BigNumberish];
  export type OutputTuple = [townId: bigint];
  export interface OutputObject {
    townId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownRecruitmentUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownSettledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownVoyagedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserArmorBrokenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserAttackedEvent {
  export type InputTuple = [
    defender: AddressLike,
    healthDamage: BigNumberish,
    armorDamage: BigNumberish
  ];
  export type OutputTuple = [
    defender: string,
    healthDamage: bigint,
    armorDamage: bigint
  ];
  export interface OutputObject {
    defender: string;
    healthDamage: bigint;
    armorDamage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBoughtEvent {
  export type InputTuple = [
    something: BigNumberish,
    to: AddressLike,
    amount: BigNumberish,
    buyer: AddressLike
  ];
  export type OutputTuple = [
    something: bigint,
    to: string,
    amount: bigint,
    buyer: string
  ];
  export interface OutputObject {
    something: bigint;
    to: string;
    amount: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBoughtGamePassEvent {
  export type InputTuple = [gamePassId: BigNumberish];
  export type OutputTuple = [gamePassId: bigint];
  export interface OutputObject {
    gamePassId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserClaimedGamePassPhaseEvent {
  export type InputTuple = [
    gamePassId: BigNumberish,
    gamePassPhase: BigNumberish
  ];
  export type OutputTuple = [gamePassId: bigint, gamePassPhase: bigint];
  export interface OutputObject {
    gamePassId: bigint;
    gamePassPhase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserExitFromTownEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserGotEvent {
  export type InputTuple = [something: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [something: bigint, amount: bigint];
  export interface OutputObject {
    something: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserJoinedTownEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserKilledEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserMissedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserMovedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldCoordinate: Coordinates.CoordinateStruct,
    newCoordinate: Coordinates.CoordinateStruct
  ];
  export type OutputTuple = [
    user: string,
    oldCoordinate: Coordinates.CoordinateStructOutput,
    newCoordinate: Coordinates.CoordinateStructOutput
  ];
  export interface OutputObject {
    user: string;
    oldCoordinate: Coordinates.CoordinateStructOutput;
    newCoordinate: Coordinates.CoordinateStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserPreparedEvent {
  export type InputTuple = [to: BigNumberish, addressesHash: BytesLike];
  export type OutputTuple = [to: bigint, addressesHash: string];
  export interface OutputObject {
    to: bigint;
    addressesHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WarDeclaredEvent {
  export type InputTuple = [war: IKillThemAll.WarStruct];
  export type OutputTuple = [war: IKillThemAll.WarStructOutput];
  export interface OutputObject {
    war: IKillThemAll.WarStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KillThemAll extends BaseContract {
  contractName: "KillThemAll";

  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: KillThemAllInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGamePass: TypedContractMethod<
    [gamePass: IKillThemAll.GamePassStruct],
    [void],
    "nonpayable"
  >;

  "addGamePass((address,uint256,uint256,uint256,uint256[]))": TypedContractMethod<
    [gamePass: IKillThemAll.GamePassStruct],
    [void],
    "nonpayable"
  >;

  attack: TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  "attack(address)": TypedContractMethod<
    [target: AddressLike],
    [void],
    "nonpayable"
  >;

  buy: TypedContractMethod<
    [buy_: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "buy(uint8,address,uint256)": TypedContractMethod<
    [buy_: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyGamePass: TypedContractMethod<[], [void], "nonpayable">;

  "buyGamePass()": TypedContractMethod<[], [void], "nonpayable">;

  changeName: TypedContractMethod<[name: BytesLike], [void], "nonpayable">;

  "changeName(bytes32)": TypedContractMethod<
    [name: BytesLike],
    [void],
    "nonpayable"
  >;

  changeTownRecruitment: TypedContractMethod<[], [void], "nonpayable">;

  "changeTownRecruitment()": TypedContractMethod<[], [void], "nonpayable">;

  claimGamePassReward: TypedContractMethod<
    [phase: BigNumberish],
    [void],
    "nonpayable"
  >;

  "claimGamePassReward(uint256)": TypedContractMethod<
    [phase: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTown: TypedContractMethod<
    [name: BytesLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  "createTown(bytes32,uint256)": TypedContractMethod<
    [name: BytesLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTownLevel: TypedContractMethod<
    [townLevel: IKillThemAll.TownLevelStruct],
    [void],
    "nonpayable"
  >;

  "createTownLevel((uint256))": TypedContractMethod<
    [townLevel: IKillThemAll.TownLevelStruct],
    [void],
    "nonpayable"
  >;

  createUserLevel: TypedContractMethod<
    [userLevel: IKillThemAll.UserLevelStruct],
    [void],
    "nonpayable"
  >;

  "createUserLevel((uint256,uint256))": TypedContractMethod<
    [userLevel: IKillThemAll.UserLevelStruct],
    [void],
    "nonpayable"
  >;

  declareWar: TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;

  "declareWar(uint256)": TypedContractMethod<
    [townId: BigNumberish],
    [void],
    "nonpayable"
  >;

  exileCitizen: TypedContractMethod<
    [citizen: AddressLike],
    [void],
    "nonpayable"
  >;

  "exileCitizen(address)": TypedContractMethod<
    [citizen: AddressLike],
    [void],
    "nonpayable"
  >;

  gamePasses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        pass: string;
        price: bigint;
        startBlock: bigint;
        endBlock: bigint;
      }
    ],
    "view"
  >;

  "gamePasses(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        pass: string;
        price: bigint;
        startBlock: bigint;
        endBlock: bigint;
      }
    ],
    "view"
  >;

  get: TypedContractMethod<[get_: BigNumberish], [void], "nonpayable">;

  "get(uint8)": TypedContractMethod<[get_: BigNumberish], [void], "nonpayable">;

  getAddressesByCoordinate: TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;

  "getAddressesByCoordinate((int64,int64))": TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;

  getCitizensByTownId: TypedContractMethod<
    [townId: BigNumberish],
    [string[]],
    "view"
  >;

  "getCitizensByTownId(uint256)": TypedContractMethod<
    [townId: BigNumberish],
    [string[]],
    "view"
  >;

  isRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  "isRegistered(address)": TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  isUserClaimedGamePassPhase: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  "isUserClaimedGamePassPhase(address,uint256,uint256)": TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  joinTown: TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;

  "joinTown(uint256)": TypedContractMethod<
    [townId: BigNumberish],
    [void],
    "nonpayable"
  >;

  leaveTown: TypedContractMethod<[], [void], "nonpayable">;

  "leaveTown()": TypedContractMethod<[], [void], "nonpayable">;

  move: TypedContractMethod<[direction: BigNumberish], [void], "nonpayable">;

  "move(uint8)": TypedContractMethod<
    [direction: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  "owner()": TypedContractMethod<[], [string], "view">;

  prepareToConditionBonus: TypedContractMethod<
    [to: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;

  "prepareToConditionBonus(uint8,address)": TypedContractMethod<
    [to: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<
    [name: BytesLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  "register(bytes32,address)": TypedContractMethod<
    [name: BytesLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "renounceOwnership()": TypedContractMethod<[], [void], "nonpayable">;

  revive: TypedContractMethod<[], [void], "nonpayable">;

  "revive()": TypedContractMethod<[], [void], "nonpayable">;

  setConditionBonus: TypedContractMethod<
    [to: BigNumberish, addressesHash: BytesLike, random: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setConditionBonus(uint8,bytes32,uint256)": TypedContractMethod<
    [to: BigNumberish, addressesHash: BytesLike, random: BigNumberish],
    [void],
    "nonpayable"
  >;

  settings: TypedContractMethod<
    [],
    [
      [
        IKillThemAll.MaxSettingStructOutput,
        IKillThemAll.PriceSettingStructOutput,
        IKillThemAll.RateSettingStructOutput,
        IKillThemAll.TimeSettingStructOutput,
        IKillThemAll.MinSettingStructOutput,
        IKillThemAll.ExpSettingStructOutput,
        IKillThemAll.MultiplierSettingStructOutput,
        bigint
      ] & {
        max: IKillThemAll.MaxSettingStructOutput;
        price: IKillThemAll.PriceSettingStructOutput;
        rate: IKillThemAll.RateSettingStructOutput;
        time: IKillThemAll.TimeSettingStructOutput;
        min: IKillThemAll.MinSettingStructOutput;
        exp: IKillThemAll.ExpSettingStructOutput;
        multiplier: IKillThemAll.MultiplierSettingStructOutput;
        numberDigits: bigint;
      }
    ],
    "view"
  >;

  "settings()": TypedContractMethod<
    [],
    [
      [
        IKillThemAll.MaxSettingStructOutput,
        IKillThemAll.PriceSettingStructOutput,
        IKillThemAll.RateSettingStructOutput,
        IKillThemAll.TimeSettingStructOutput,
        IKillThemAll.MinSettingStructOutput,
        IKillThemAll.ExpSettingStructOutput,
        IKillThemAll.MultiplierSettingStructOutput,
        bigint
      ] & {
        max: IKillThemAll.MaxSettingStructOutput;
        price: IKillThemAll.PriceSettingStructOutput;
        rate: IKillThemAll.RateSettingStructOutput;
        time: IKillThemAll.TimeSettingStructOutput;
        min: IKillThemAll.MinSettingStructOutput;
        exp: IKillThemAll.ExpSettingStructOutput;
        multiplier: IKillThemAll.MultiplierSettingStructOutput;
        numberDigits: bigint;
      }
    ],
    "view"
  >;

  settleTown: TypedContractMethod<[], [void], "nonpayable">;

  "settleTown()": TypedContractMethod<[], [void], "nonpayable">;

  teleport: TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;

  "teleport((int64,int64))": TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;

  teleportToTown: TypedContractMethod<[], [void], "nonpayable">;

  "teleportToTown()": TypedContractMethod<[], [void], "nonpayable">;

  townById: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Coordinates.CoordinateStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        Timers.BlockNumberStructOutput
      ] & {
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        leader: string;
        exp: bigint;
        levelId: bigint;
        price: bigint;
        recruitment: boolean;
        status: bigint;
        mode: bigint;
        protectionAt: Timers.BlockNumberStructOutput;
      }
    ],
    "view"
  >;

  "townById(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Coordinates.CoordinateStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        Timers.BlockNumberStructOutput
      ] & {
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        leader: string;
        exp: bigint;
        levelId: bigint;
        price: bigint;
        recruitment: boolean;
        status: bigint;
        mode: bigint;
        protectionAt: Timers.BlockNumberStructOutput;
      }
    ],
    "view"
  >;

  townIdByCoordinate: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  "townIdByCoordinate(int256,int256)": TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  townWar: TypedContractMethod<[], [void], "nonpayable">;

  "townWar()": TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "transferOwnership(address)": TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  typechainGenerateTown: TypedContractMethod<
    [town: IKillThemAll.TownStruct],
    [void],
    "nonpayable"
  >;

  "typechainGenerateTown(((int64,int64),bytes32,address,address[],uint256,uint256,uint256,bool,uint8,uint8,(uint256)))": TypedContractMethod<
    [town: IKillThemAll.TownStruct],
    [void],
    "nonpayable"
  >;

  typechainGenerateUser: TypedContractMethod<
    [user: IKillThemAll.UserStruct],
    [void],
    "nonpayable"
  >;

  "typechainGenerateUser((uint256,uint256,uint256,uint256,(int64,int64),bytes32,uint256,uint256,address,(uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint256)))": TypedContractMethod<
    [user: IKillThemAll.UserStruct],
    [void],
    "nonpayable"
  >;

  updateSettings: TypedContractMethod<
    [settings_: IKillThemAll.SettingStruct],
    [void],
    "nonpayable"
  >;

  "updateSettings(((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256))": TypedContractMethod<
    [settings_: IKillThemAll.SettingStruct],
    [void],
    "nonpayable"
  >;

  upgradeCharacter: TypedContractMethod<
    [charInfo: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "upgradeCharacter(uint8,uint256)": TypedContractMethod<
    [charInfo: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userByAddr: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;

  "userByAddr(address)": TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;

  voyageTown: TypedContractMethod<[], [void], "nonpayable">;

  "voyageTown()": TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGamePass"
  ): TypedContractMethod<
    [gamePass: IKillThemAll.GamePassStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addGamePass((address,uint256,uint256,uint256,uint256[]))"
  ): TypedContractMethod<
    [gamePass: IKillThemAll.GamePassStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attack"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "attack(address)"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [buy_: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buy(uint8,address,uint256)"
  ): TypedContractMethod<
    [buy_: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyGamePass"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyGamePass()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeName"
  ): TypedContractMethod<[name: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeName(bytes32)"
  ): TypedContractMethod<[name: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTownRecruitment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTownRecruitment()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimGamePassReward"
  ): TypedContractMethod<[phase: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimGamePassReward(uint256)"
  ): TypedContractMethod<[phase: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTown"
  ): TypedContractMethod<
    [name: BytesLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTown(bytes32,uint256)"
  ): TypedContractMethod<
    [name: BytesLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTownLevel"
  ): TypedContractMethod<
    [townLevel: IKillThemAll.TownLevelStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTownLevel((uint256))"
  ): TypedContractMethod<
    [townLevel: IKillThemAll.TownLevelStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserLevel"
  ): TypedContractMethod<
    [userLevel: IKillThemAll.UserLevelStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserLevel((uint256,uint256))"
  ): TypedContractMethod<
    [userLevel: IKillThemAll.UserLevelStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declareWar"
  ): TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "declareWar(uint256)"
  ): TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exileCitizen"
  ): TypedContractMethod<[citizen: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exileCitizen(address)"
  ): TypedContractMethod<[citizen: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gamePasses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        pass: string;
        price: bigint;
        startBlock: bigint;
        endBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gamePasses(uint256)"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        pass: string;
        price: bigint;
        startBlock: bigint;
        endBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[get_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "get(uint8)"
  ): TypedContractMethod<[get_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAddressesByCoordinate"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAddressesByCoordinate((int64,int64))"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCitizensByTownId"
  ): TypedContractMethod<[townId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCitizensByTownId(uint256)"
  ): TypedContractMethod<[townId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistered(address)"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserClaimedGamePassPhase"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserClaimedGamePassPhase(address,uint256,uint256)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinTown"
  ): TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "joinTown(uint256)"
  ): TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leaveTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leaveTown()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<[direction: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "move(uint8)"
  ): TypedContractMethod<[direction: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prepareToConditionBonus"
  ): TypedContractMethod<
    [to: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareToConditionBonus(uint8,address)"
  ): TypedContractMethod<
    [to: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [name: BytesLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register(bytes32,address)"
  ): TypedContractMethod<
    [name: BytesLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revive"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revive()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConditionBonus"
  ): TypedContractMethod<
    [to: BigNumberish, addressesHash: BytesLike, random: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConditionBonus(uint8,bytes32,uint256)"
  ): TypedContractMethod<
    [to: BigNumberish, addressesHash: BytesLike, random: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settings"
  ): TypedContractMethod<
    [],
    [
      [
        IKillThemAll.MaxSettingStructOutput,
        IKillThemAll.PriceSettingStructOutput,
        IKillThemAll.RateSettingStructOutput,
        IKillThemAll.TimeSettingStructOutput,
        IKillThemAll.MinSettingStructOutput,
        IKillThemAll.ExpSettingStructOutput,
        IKillThemAll.MultiplierSettingStructOutput,
        bigint
      ] & {
        max: IKillThemAll.MaxSettingStructOutput;
        price: IKillThemAll.PriceSettingStructOutput;
        rate: IKillThemAll.RateSettingStructOutput;
        time: IKillThemAll.TimeSettingStructOutput;
        min: IKillThemAll.MinSettingStructOutput;
        exp: IKillThemAll.ExpSettingStructOutput;
        multiplier: IKillThemAll.MultiplierSettingStructOutput;
        numberDigits: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "settings()"
  ): TypedContractMethod<
    [],
    [
      [
        IKillThemAll.MaxSettingStructOutput,
        IKillThemAll.PriceSettingStructOutput,
        IKillThemAll.RateSettingStructOutput,
        IKillThemAll.TimeSettingStructOutput,
        IKillThemAll.MinSettingStructOutput,
        IKillThemAll.ExpSettingStructOutput,
        IKillThemAll.MultiplierSettingStructOutput,
        bigint
      ] & {
        max: IKillThemAll.MaxSettingStructOutput;
        price: IKillThemAll.PriceSettingStructOutput;
        rate: IKillThemAll.RateSettingStructOutput;
        time: IKillThemAll.TimeSettingStructOutput;
        min: IKillThemAll.MinSettingStructOutput;
        exp: IKillThemAll.ExpSettingStructOutput;
        multiplier: IKillThemAll.MultiplierSettingStructOutput;
        numberDigits: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "settleTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleTown()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teleport"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "teleport((int64,int64))"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "teleportToTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teleportToTown()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "townById"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Coordinates.CoordinateStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        Timers.BlockNumberStructOutput
      ] & {
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        leader: string;
        exp: bigint;
        levelId: bigint;
        price: bigint;
        recruitment: boolean;
        status: bigint;
        mode: bigint;
        protectionAt: Timers.BlockNumberStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "townById(uint256)"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Coordinates.CoordinateStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        Timers.BlockNumberStructOutput
      ] & {
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        leader: string;
        exp: bigint;
        levelId: bigint;
        price: bigint;
        recruitment: boolean;
        status: bigint;
        mode: bigint;
        protectionAt: Timers.BlockNumberStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "townIdByCoordinate"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "townIdByCoordinate(int256,int256)"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "townWar"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "townWar()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typechainGenerateTown"
  ): TypedContractMethod<[town: IKillThemAll.TownStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typechainGenerateTown(((int64,int64),bytes32,address,address[],uint256,uint256,uint256,bool,uint8,uint8,(uint256)))"
  ): TypedContractMethod<[town: IKillThemAll.TownStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typechainGenerateUser"
  ): TypedContractMethod<[user: IKillThemAll.UserStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typechainGenerateUser((uint256,uint256,uint256,uint256,(int64,int64),bytes32,uint256,uint256,address,(uint256,uint256),((uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256)),(uint256,uint256)))"
  ): TypedContractMethod<[user: IKillThemAll.UserStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSettings"
  ): TypedContractMethod<
    [settings_: IKillThemAll.SettingStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSettings(((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256))"
  ): TypedContractMethod<
    [settings_: IKillThemAll.SettingStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeCharacter"
  ): TypedContractMethod<
    [charInfo: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeCharacter(uint8,uint256)"
  ): TypedContractMethod<
    [charInfo: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userByAddr"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userByAddr(address)"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "voyageTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voyageTown()"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "LevelUp"
  ): TypedContractEvent<
    LevelUpEvent.InputTuple,
    LevelUpEvent.OutputTuple,
    LevelUpEvent.OutputObject
  >;
  getEvent(
    key: "LevelUp(address)"
  ): TypedContractEvent<
    LevelUp_address_Event.InputTuple,
    LevelUp_address_Event.OutputTuple,
    LevelUp_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "TownCreated"
  ): TypedContractEvent<
    TownCreatedEvent.InputTuple,
    TownCreatedEvent.OutputTuple,
    TownCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TownCreated()"
  ): TypedContractEvent<
    TownCreated__Event.InputTuple,
    TownCreated__Event.OutputTuple,
    TownCreated__Event.OutputObject
  >;
  getEvent(
    key: "TownDisbanded"
  ): TypedContractEvent<
    TownDisbandedEvent.InputTuple,
    TownDisbandedEvent.OutputTuple,
    TownDisbandedEvent.OutputObject
  >;
  getEvent(
    key: "TownDisbanded(uint256)"
  ): TypedContractEvent<
    TownDisbanded_uint256_Event.InputTuple,
    TownDisbanded_uint256_Event.OutputTuple,
    TownDisbanded_uint256_Event.OutputObject
  >;
  getEvent(
    key: "TownRecruitmentUpdated"
  ): TypedContractEvent<
    TownRecruitmentUpdatedEvent.InputTuple,
    TownRecruitmentUpdatedEvent.OutputTuple,
    TownRecruitmentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TownRecruitmentUpdated()"
  ): TypedContractEvent<
    TownRecruitmentUpdated__Event.InputTuple,
    TownRecruitmentUpdated__Event.OutputTuple,
    TownRecruitmentUpdated__Event.OutputObject
  >;
  getEvent(
    key: "TownSettled"
  ): TypedContractEvent<
    TownSettledEvent.InputTuple,
    TownSettledEvent.OutputTuple,
    TownSettledEvent.OutputObject
  >;
  getEvent(
    key: "TownSettled()"
  ): TypedContractEvent<
    TownSettled__Event.InputTuple,
    TownSettled__Event.OutputTuple,
    TownSettled__Event.OutputObject
  >;
  getEvent(
    key: "TownVoyaged"
  ): TypedContractEvent<
    TownVoyagedEvent.InputTuple,
    TownVoyagedEvent.OutputTuple,
    TownVoyagedEvent.OutputObject
  >;
  getEvent(
    key: "TownVoyaged()"
  ): TypedContractEvent<
    TownVoyaged__Event.InputTuple,
    TownVoyaged__Event.OutputTuple,
    TownVoyaged__Event.OutputObject
  >;
  getEvent(
    key: "UserArmorBroken"
  ): TypedContractEvent<
    UserArmorBrokenEvent.InputTuple,
    UserArmorBrokenEvent.OutputTuple,
    UserArmorBrokenEvent.OutputObject
  >;
  getEvent(
    key: "UserArmorBroken()"
  ): TypedContractEvent<
    UserArmorBroken__Event.InputTuple,
    UserArmorBroken__Event.OutputTuple,
    UserArmorBroken__Event.OutputObject
  >;
  getEvent(
    key: "UserAttacked"
  ): TypedContractEvent<
    UserAttackedEvent.InputTuple,
    UserAttackedEvent.OutputTuple,
    UserAttackedEvent.OutputObject
  >;
  getEvent(
    key: "UserAttacked(address,uint256,uint256)"
  ): TypedContractEvent<
    UserAttacked_address_uint256_uint256_Event.InputTuple,
    UserAttacked_address_uint256_uint256_Event.OutputTuple,
    UserAttacked_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "UserBought"
  ): TypedContractEvent<
    UserBoughtEvent.InputTuple,
    UserBoughtEvent.OutputTuple,
    UserBoughtEvent.OutputObject
  >;
  getEvent(
    key: "UserBought(uint8,address,uint256,address)"
  ): TypedContractEvent<
    UserBought_uint8_address_uint256_address_Event.InputTuple,
    UserBought_uint8_address_uint256_address_Event.OutputTuple,
    UserBought_uint8_address_uint256_address_Event.OutputObject
  >;
  getEvent(
    key: "UserBoughtGamePass"
  ): TypedContractEvent<
    UserBoughtGamePassEvent.InputTuple,
    UserBoughtGamePassEvent.OutputTuple,
    UserBoughtGamePassEvent.OutputObject
  >;
  getEvent(
    key: "UserBoughtGamePass(uint256)"
  ): TypedContractEvent<
    UserBoughtGamePass_uint256_Event.InputTuple,
    UserBoughtGamePass_uint256_Event.OutputTuple,
    UserBoughtGamePass_uint256_Event.OutputObject
  >;
  getEvent(
    key: "UserClaimedGamePassPhase"
  ): TypedContractEvent<
    UserClaimedGamePassPhaseEvent.InputTuple,
    UserClaimedGamePassPhaseEvent.OutputTuple,
    UserClaimedGamePassPhaseEvent.OutputObject
  >;
  getEvent(
    key: "UserClaimedGamePassPhase(uint256,uint256)"
  ): TypedContractEvent<
    UserClaimedGamePassPhase_uint256_uint256_Event.InputTuple,
    UserClaimedGamePassPhase_uint256_uint256_Event.OutputTuple,
    UserClaimedGamePassPhase_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "UserExitFromTown"
  ): TypedContractEvent<
    UserExitFromTownEvent.InputTuple,
    UserExitFromTownEvent.OutputTuple,
    UserExitFromTownEvent.OutputObject
  >;
  getEvent(
    key: "UserExitFromTown(address)"
  ): TypedContractEvent<
    UserExitFromTown_address_Event.InputTuple,
    UserExitFromTown_address_Event.OutputTuple,
    UserExitFromTown_address_Event.OutputObject
  >;
  getEvent(
    key: "UserGot"
  ): TypedContractEvent<
    UserGotEvent.InputTuple,
    UserGotEvent.OutputTuple,
    UserGotEvent.OutputObject
  >;
  getEvent(
    key: "UserGot(uint8,uint256)"
  ): TypedContractEvent<
    UserGot_uint8_uint256_Event.InputTuple,
    UserGot_uint8_uint256_Event.OutputTuple,
    UserGot_uint8_uint256_Event.OutputObject
  >;
  getEvent(
    key: "UserJoinedTown"
  ): TypedContractEvent<
    UserJoinedTownEvent.InputTuple,
    UserJoinedTownEvent.OutputTuple,
    UserJoinedTownEvent.OutputObject
  >;
  getEvent(
    key: "UserJoinedTown()"
  ): TypedContractEvent<
    UserJoinedTown__Event.InputTuple,
    UserJoinedTown__Event.OutputTuple,
    UserJoinedTown__Event.OutputObject
  >;
  getEvent(
    key: "UserKilled"
  ): TypedContractEvent<
    UserKilledEvent.InputTuple,
    UserKilledEvent.OutputTuple,
    UserKilledEvent.OutputObject
  >;
  getEvent(
    key: "UserKilled(address)"
  ): TypedContractEvent<
    UserKilled_address_Event.InputTuple,
    UserKilled_address_Event.OutputTuple,
    UserKilled_address_Event.OutputObject
  >;
  getEvent(
    key: "UserMissed"
  ): TypedContractEvent<
    UserMissedEvent.InputTuple,
    UserMissedEvent.OutputTuple,
    UserMissedEvent.OutputObject
  >;
  getEvent(
    key: "UserMissed()"
  ): TypedContractEvent<
    UserMissed__Event.InputTuple,
    UserMissed__Event.OutputTuple,
    UserMissed__Event.OutputObject
  >;
  getEvent(
    key: "UserMoved"
  ): TypedContractEvent<
    UserMovedEvent.InputTuple,
    UserMovedEvent.OutputTuple,
    UserMovedEvent.OutputObject
  >;
  getEvent(
    key: "UserMoved(address,tuple,tuple)"
  ): TypedContractEvent<
    UserMoved_address_tuple_tuple_Event.InputTuple,
    UserMoved_address_tuple_tuple_Event.OutputTuple,
    UserMoved_address_tuple_tuple_Event.OutputObject
  >;
  getEvent(
    key: "UserPrepared"
  ): TypedContractEvent<
    UserPreparedEvent.InputTuple,
    UserPreparedEvent.OutputTuple,
    UserPreparedEvent.OutputObject
  >;
  getEvent(
    key: "UserPrepared(uint8,bytes32)"
  ): TypedContractEvent<
    UserPrepared_uint8_bytes32_Event.InputTuple,
    UserPrepared_uint8_bytes32_Event.OutputTuple,
    UserPrepared_uint8_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered()"
  ): TypedContractEvent<
    UserRegistered__Event.InputTuple,
    UserRegistered__Event.OutputTuple,
    UserRegistered__Event.OutputObject
  >;
  getEvent(
    key: "WarDeclared"
  ): TypedContractEvent<
    WarDeclaredEvent.InputTuple,
    WarDeclaredEvent.OutputTuple,
    WarDeclaredEvent.OutputObject
  >;
  getEvent(
    key: "WarDeclared(tuple)"
  ): TypedContractEvent<
    WarDeclared_tuple_Event.InputTuple,
    WarDeclared_tuple_Event.OutputTuple,
    WarDeclared_tuple_Event.OutputObject
  >;

  filters: {
    "LevelUp(address)": TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;
    LevelUp: TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TownCreated()": TypedContractEvent<
      TownCreatedEvent.InputTuple,
      TownCreatedEvent.OutputTuple,
      TownCreatedEvent.OutputObject
    >;
    TownCreated: TypedContractEvent<
      TownCreatedEvent.InputTuple,
      TownCreatedEvent.OutputTuple,
      TownCreatedEvent.OutputObject
    >;

    "TownDisbanded(uint256)": TypedContractEvent<
      TownDisbandedEvent.InputTuple,
      TownDisbandedEvent.OutputTuple,
      TownDisbandedEvent.OutputObject
    >;
    TownDisbanded: TypedContractEvent<
      TownDisbandedEvent.InputTuple,
      TownDisbandedEvent.OutputTuple,
      TownDisbandedEvent.OutputObject
    >;

    "TownRecruitmentUpdated()": TypedContractEvent<
      TownRecruitmentUpdatedEvent.InputTuple,
      TownRecruitmentUpdatedEvent.OutputTuple,
      TownRecruitmentUpdatedEvent.OutputObject
    >;
    TownRecruitmentUpdated: TypedContractEvent<
      TownRecruitmentUpdatedEvent.InputTuple,
      TownRecruitmentUpdatedEvent.OutputTuple,
      TownRecruitmentUpdatedEvent.OutputObject
    >;

    "TownSettled()": TypedContractEvent<
      TownSettledEvent.InputTuple,
      TownSettledEvent.OutputTuple,
      TownSettledEvent.OutputObject
    >;
    TownSettled: TypedContractEvent<
      TownSettledEvent.InputTuple,
      TownSettledEvent.OutputTuple,
      TownSettledEvent.OutputObject
    >;

    "TownVoyaged()": TypedContractEvent<
      TownVoyagedEvent.InputTuple,
      TownVoyagedEvent.OutputTuple,
      TownVoyagedEvent.OutputObject
    >;
    TownVoyaged: TypedContractEvent<
      TownVoyagedEvent.InputTuple,
      TownVoyagedEvent.OutputTuple,
      TownVoyagedEvent.OutputObject
    >;

    "UserArmorBroken()": TypedContractEvent<
      UserArmorBrokenEvent.InputTuple,
      UserArmorBrokenEvent.OutputTuple,
      UserArmorBrokenEvent.OutputObject
    >;
    UserArmorBroken: TypedContractEvent<
      UserArmorBrokenEvent.InputTuple,
      UserArmorBrokenEvent.OutputTuple,
      UserArmorBrokenEvent.OutputObject
    >;

    "UserAttacked(address,uint256,uint256)": TypedContractEvent<
      UserAttackedEvent.InputTuple,
      UserAttackedEvent.OutputTuple,
      UserAttackedEvent.OutputObject
    >;
    UserAttacked: TypedContractEvent<
      UserAttackedEvent.InputTuple,
      UserAttackedEvent.OutputTuple,
      UserAttackedEvent.OutputObject
    >;

    "UserBought(uint8,address,uint256,address)": TypedContractEvent<
      UserBoughtEvent.InputTuple,
      UserBoughtEvent.OutputTuple,
      UserBoughtEvent.OutputObject
    >;
    UserBought: TypedContractEvent<
      UserBoughtEvent.InputTuple,
      UserBoughtEvent.OutputTuple,
      UserBoughtEvent.OutputObject
    >;

    "UserBoughtGamePass(uint256)": TypedContractEvent<
      UserBoughtGamePassEvent.InputTuple,
      UserBoughtGamePassEvent.OutputTuple,
      UserBoughtGamePassEvent.OutputObject
    >;
    UserBoughtGamePass: TypedContractEvent<
      UserBoughtGamePassEvent.InputTuple,
      UserBoughtGamePassEvent.OutputTuple,
      UserBoughtGamePassEvent.OutputObject
    >;

    "UserClaimedGamePassPhase(uint256,uint256)": TypedContractEvent<
      UserClaimedGamePassPhaseEvent.InputTuple,
      UserClaimedGamePassPhaseEvent.OutputTuple,
      UserClaimedGamePassPhaseEvent.OutputObject
    >;
    UserClaimedGamePassPhase: TypedContractEvent<
      UserClaimedGamePassPhaseEvent.InputTuple,
      UserClaimedGamePassPhaseEvent.OutputTuple,
      UserClaimedGamePassPhaseEvent.OutputObject
    >;

    "UserExitFromTown(address)": TypedContractEvent<
      UserExitFromTownEvent.InputTuple,
      UserExitFromTownEvent.OutputTuple,
      UserExitFromTownEvent.OutputObject
    >;
    UserExitFromTown: TypedContractEvent<
      UserExitFromTownEvent.InputTuple,
      UserExitFromTownEvent.OutputTuple,
      UserExitFromTownEvent.OutputObject
    >;

    "UserGot(uint8,uint256)": TypedContractEvent<
      UserGotEvent.InputTuple,
      UserGotEvent.OutputTuple,
      UserGotEvent.OutputObject
    >;
    UserGot: TypedContractEvent<
      UserGotEvent.InputTuple,
      UserGotEvent.OutputTuple,
      UserGotEvent.OutputObject
    >;

    "UserJoinedTown()": TypedContractEvent<
      UserJoinedTownEvent.InputTuple,
      UserJoinedTownEvent.OutputTuple,
      UserJoinedTownEvent.OutputObject
    >;
    UserJoinedTown: TypedContractEvent<
      UserJoinedTownEvent.InputTuple,
      UserJoinedTownEvent.OutputTuple,
      UserJoinedTownEvent.OutputObject
    >;

    "UserKilled(address)": TypedContractEvent<
      UserKilledEvent.InputTuple,
      UserKilledEvent.OutputTuple,
      UserKilledEvent.OutputObject
    >;
    UserKilled: TypedContractEvent<
      UserKilledEvent.InputTuple,
      UserKilledEvent.OutputTuple,
      UserKilledEvent.OutputObject
    >;

    "UserMissed()": TypedContractEvent<
      UserMissedEvent.InputTuple,
      UserMissedEvent.OutputTuple,
      UserMissedEvent.OutputObject
    >;
    UserMissed: TypedContractEvent<
      UserMissedEvent.InputTuple,
      UserMissedEvent.OutputTuple,
      UserMissedEvent.OutputObject
    >;

    "UserMoved(address,tuple,tuple)": TypedContractEvent<
      UserMovedEvent.InputTuple,
      UserMovedEvent.OutputTuple,
      UserMovedEvent.OutputObject
    >;
    UserMoved: TypedContractEvent<
      UserMovedEvent.InputTuple,
      UserMovedEvent.OutputTuple,
      UserMovedEvent.OutputObject
    >;

    "UserPrepared(uint8,bytes32)": TypedContractEvent<
      UserPreparedEvent.InputTuple,
      UserPreparedEvent.OutputTuple,
      UserPreparedEvent.OutputObject
    >;
    UserPrepared: TypedContractEvent<
      UserPreparedEvent.InputTuple,
      UserPreparedEvent.OutputTuple,
      UserPreparedEvent.OutputObject
    >;

    "UserRegistered()": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "WarDeclared(tuple)": TypedContractEvent<
      WarDeclaredEvent.InputTuple,
      WarDeclaredEvent.OutputTuple,
      WarDeclaredEvent.OutputObject
    >;
    WarDeclared: TypedContractEvent<
      WarDeclaredEvent.InputTuple,
      WarDeclaredEvent.OutputTuple,
      WarDeclaredEvent.OutputObject
    >;
  };
}
