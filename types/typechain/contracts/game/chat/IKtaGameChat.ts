/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IKtaGameChatInterface extends Interface {
  getFunction(
    nameOrSignature: "getAnnouncements" | "sendAnnouncement" | "sendMessage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Announcement" | "Message"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAnnouncements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAnnouncement",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sendMessage", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getAnnouncements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendAnnouncement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
}

export namespace AnnouncementEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageEvent {
  export type InputTuple = [user: AddressLike, message: string];
  export type OutputTuple = [user: string, message: string];
  export interface OutputObject {
    user: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IKtaGameChat extends BaseContract {
  contractName: "IKtaGameChat";

  connect(runner?: ContractRunner | null): IKtaGameChat;
  waitForDeployment(): Promise<this>;

  interface: IKtaGameChatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAnnouncements: TypedContractMethod<[], [string[]], "view">;

  sendAnnouncement: TypedContractMethod<
    [message: string],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<[message: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAnnouncements"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "sendAnnouncement"
  ): TypedContractMethod<[message: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<[message: string], [void], "nonpayable">;

  getEvent(
    key: "Announcement"
  ): TypedContractEvent<
    AnnouncementEvent.InputTuple,
    AnnouncementEvent.OutputTuple,
    AnnouncementEvent.OutputObject
  >;
  getEvent(
    key: "Message"
  ): TypedContractEvent<
    MessageEvent.InputTuple,
    MessageEvent.OutputTuple,
    MessageEvent.OutputObject
  >;

  filters: {
    "Announcement(string)": TypedContractEvent<
      AnnouncementEvent.InputTuple,
      AnnouncementEvent.OutputTuple,
      AnnouncementEvent.OutputObject
    >;
    Announcement: TypedContractEvent<
      AnnouncementEvent.InputTuple,
      AnnouncementEvent.OutputTuple,
      AnnouncementEvent.OutputObject
    >;

    "Message(address,string)": TypedContractEvent<
      MessageEvent.InputTuple,
      MessageEvent.OutputTuple,
      MessageEvent.OutputObject
    >;
    Message: TypedContractEvent<
      MessageEvent.InputTuple,
      MessageEvent.OutputTuple,
      MessageEvent.OutputObject
    >;
  };
}
