/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IKillThemAll {
  export type GamePassStruct = {
    pass: AddressLike;
    price: BigNumberish;
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    phaseLimits: BigNumberish[];
  };

  export type GamePassStructOutput = [
    pass: string,
    price: bigint,
    startBlock: bigint,
    endBlock: bigint,
    phaseLimits: bigint[]
  ] & {
    pass: string;
    price: bigint;
    startBlock: bigint;
    endBlock: bigint;
    phaseLimits: bigint[];
  };
}

export interface IKtaGamePassNftInterface extends Interface {
  getFunction(
    nameOrSignature: "pause" | "safeMint" | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeMint",
    values: [
      AddressLike,
      BigNumberish,
      IKillThemAll.GamePassStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export interface IKtaGamePassNft extends BaseContract {
  contractName: "IKtaGamePassNft";

  connect(runner?: ContractRunner | null): IKtaGamePassNft;
  waitForDeployment(): Promise<this>;

  interface: IKtaGamePassNftInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  safeMint: TypedContractMethod<
    [
      to: AddressLike,
      gamePassId: BigNumberish,
      arg2: IKillThemAll.GamePassStruct,
      userExp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeMint"
  ): TypedContractMethod<
    [
      to: AddressLike,
      gamePassId: BigNumberish,
      arg2: IKillThemAll.GamePassStruct,
      userExp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
