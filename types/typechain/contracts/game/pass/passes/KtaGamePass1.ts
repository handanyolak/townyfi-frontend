/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace Coordinates {
  export type CoordinateStruct = { _x: BigNumberish; _y: BigNumberish };

  export type CoordinateStructOutput = [_x: bigint, _y: bigint] & {
    _x: bigint;
    _y: bigint;
  };
}

export declare namespace IKillThemAll {
  export type UserTownInfoStruct = {
    townId: BigNumberish;
    joinBlock: BigNumberish;
  };

  export type UserTownInfoStructOutput = [townId: bigint, joinBlock: bigint] & {
    townId: bigint;
    joinBlock: bigint;
  };

  export type UserTimerStruct = {
    getHealth: Timers.BlockNumberStruct;
    getMana: Timers.BlockNumberStruct;
    getEnergy: Timers.BlockNumberStruct;
    revive: Timers.BlockNumberStruct;
    teleport: Timers.BlockNumberStruct;
    teleportToTown: Timers.BlockNumberStruct;
    prepareToAttack: Timers.BlockNumberStruct;
  };

  export type UserTimerStructOutput = [
    getHealth: Timers.BlockNumberStructOutput,
    getMana: Timers.BlockNumberStructOutput,
    getEnergy: Timers.BlockNumberStructOutput,
    revive: Timers.BlockNumberStructOutput,
    teleport: Timers.BlockNumberStructOutput,
    teleportToTown: Timers.BlockNumberStructOutput,
    prepareToAttack: Timers.BlockNumberStructOutput
  ] & {
    getHealth: Timers.BlockNumberStructOutput;
    getMana: Timers.BlockNumberStructOutput;
    getEnergy: Timers.BlockNumberStructOutput;
    revive: Timers.BlockNumberStructOutput;
    teleport: Timers.BlockNumberStructOutput;
    teleportToTown: Timers.BlockNumberStructOutput;
    prepareToAttack: Timers.BlockNumberStructOutput;
  };

  export type UserCharPointStruct = {
    attack: BigNumberish;
    defend: BigNumberish;
  };

  export type UserCharPointStructOutput = [attack: bigint, defend: bigint] & {
    attack: bigint;
    defend: bigint;
  };
}

export declare namespace Timers {
  export type BlockNumberStruct = { _at: BigNumberish };

  export type BlockNumberStructOutput = [_at: bigint] & { _at: bigint };
}

export interface KtaGamePass1Interface extends Interface {
  getFunction(nameOrSignature: "claim" | "userByAddress"): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "userByAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userByAddress",
    data: BytesLike
  ): Result;
}

export interface KtaGamePass1 extends BaseContract {
  contractName: "KtaGamePass1";

  connect(runner?: ContractRunner | null): KtaGamePass1;
  waitForDeployment(): Promise<this>;

  interface: KtaGamePass1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<[phase: BigNumberish], [boolean], "nonpayable">;

  userByAddress: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[phase: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "userByAddress"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;

  filters: {};
}
