/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IKillThemAll {
  export type MaxSettingStruct = {
    health: BigNumberish;
    mana: BigNumberish;
    energy: BigNumberish;
    armor: BigNumberish;
    teleportDistance: BigNumberish;
    killArmorRewardLimit: BigNumberish;
    safeTownDistance: BigNumberish;
    safeTownDifference: BigNumberish;
    safeZoneDistance: BigNumberish;
    safeZoneDifference: BigNumberish;
    attackDistance: BigNumberish;
    levelDifference: BigNumberish;
  };

  export type MaxSettingStructOutput = [
    health: bigint,
    mana: bigint,
    energy: bigint,
    armor: bigint,
    teleportDistance: bigint,
    killArmorRewardLimit: bigint,
    safeTownDistance: bigint,
    safeTownDifference: bigint,
    safeZoneDistance: bigint,
    safeZoneDifference: bigint,
    attackDistance: bigint,
    levelDifference: bigint
  ] & {
    health: bigint;
    mana: bigint;
    energy: bigint;
    armor: bigint;
    teleportDistance: bigint;
    killArmorRewardLimit: bigint;
    safeTownDistance: bigint;
    safeTownDifference: bigint;
    safeZoneDistance: bigint;
    safeZoneDifference: bigint;
    attackDistance: bigint;
    levelDifference: bigint;
  };

  export type PriceSettingStruct = {
    health: BigNumberish;
    mana: BigNumberish;
    energy: BigNumberish;
    armor: BigNumberish;
    revive: BigNumberish;
    register: BigNumberish;
    teleport: BigNumberish;
    createTown: BigNumberish;
    settleTown: BigNumberish;
    teleportToTown: BigNumberish;
    prepareAttack: BigNumberish;
    prepareDefend: BigNumberish;
  };

  export type PriceSettingStructOutput = [
    health: bigint,
    mana: bigint,
    energy: bigint,
    armor: bigint,
    revive: bigint,
    register: bigint,
    teleport: bigint,
    createTown: bigint,
    settleTown: bigint,
    teleportToTown: bigint,
    prepareAttack: bigint,
    prepareDefend: bigint
  ] & {
    health: bigint;
    mana: bigint;
    energy: bigint;
    armor: bigint;
    revive: bigint;
    register: bigint;
    teleport: bigint;
    createTown: bigint;
    settleTown: bigint;
    teleportToTown: bigint;
    prepareAttack: bigint;
    prepareDefend: bigint;
  };

  export type RateSettingStruct = {
    getHealth: BigNumberish;
    getMana: BigNumberish;
    getEnergy: BigNumberish;
    registerReferralReward: BigNumberish;
    armorAbsorption: BigNumberish;
    attack: BigNumberish;
    movement: BigNumberish;
  };

  export type RateSettingStructOutput = [
    getHealth: bigint,
    getMana: bigint,
    getEnergy: bigint,
    registerReferralReward: bigint,
    armorAbsorption: bigint,
    attack: bigint,
    movement: bigint
  ] & {
    getHealth: bigint;
    getMana: bigint;
    getEnergy: bigint;
    registerReferralReward: bigint;
    armorAbsorption: bigint;
    attack: bigint;
    movement: bigint;
  };

  export type TimeSettingStruct = {
    revive: BigNumberish;
    teleport: BigNumberish;
    teleportToTown: BigNumberish;
    attackableAt: BigNumberish;
    warExpiredAt: BigNumberish;
    protectionAt: BigNumberish;
    prepareToAttack: BigNumberish;
  };

  export type TimeSettingStructOutput = [
    revive: bigint,
    teleport: bigint,
    teleportToTown: bigint,
    attackableAt: bigint,
    warExpiredAt: bigint,
    protectionAt: bigint,
    prepareToAttack: bigint
  ] & {
    revive: bigint;
    teleport: bigint;
    teleportToTown: bigint;
    attackableAt: bigint;
    warExpiredAt: bigint;
    protectionAt: bigint;
    prepareToAttack: bigint;
  };

  export type MinSettingStruct = {
    levelToCreateTown: BigNumberish;
    townAreaRadius: BigNumberish;
  };

  export type MinSettingStructOutput = [
    levelToCreateTown: bigint,
    townAreaRadius: bigint
  ] & { levelToCreateTown: bigint; townAreaRadius: bigint };

  export type ExpSettingStruct = {
    kill: BigNumberish;
    referrerKill: BigNumberish;
  };

  export type ExpSettingStructOutput = [kill: bigint, referrerKill: bigint] & {
    kill: bigint;
    referrerKill: bigint;
  };

  export type MultiplierSettingStruct = {
    attack: BigNumberish;
    resistance: BigNumberish;
  };

  export type MultiplierSettingStructOutput = [
    attack: bigint,
    resistance: bigint
  ] & { attack: bigint; resistance: bigint };

  export type SettingStruct = {
    max: IKillThemAll.MaxSettingStruct;
    price: IKillThemAll.PriceSettingStruct;
    rate: IKillThemAll.RateSettingStruct;
    time: IKillThemAll.TimeSettingStruct;
    min: IKillThemAll.MinSettingStruct;
    exp: IKillThemAll.ExpSettingStruct;
    multiplier: IKillThemAll.MultiplierSettingStruct;
    numberDigits: BigNumberish;
  };

  export type SettingStructOutput = [
    max: IKillThemAll.MaxSettingStructOutput,
    price: IKillThemAll.PriceSettingStructOutput,
    rate: IKillThemAll.RateSettingStructOutput,
    time: IKillThemAll.TimeSettingStructOutput,
    min: IKillThemAll.MinSettingStructOutput,
    exp: IKillThemAll.ExpSettingStructOutput,
    multiplier: IKillThemAll.MultiplierSettingStructOutput,
    numberDigits: bigint
  ] & {
    max: IKillThemAll.MaxSettingStructOutput;
    price: IKillThemAll.PriceSettingStructOutput;
    rate: IKillThemAll.RateSettingStructOutput;
    time: IKillThemAll.TimeSettingStructOutput;
    min: IKillThemAll.MinSettingStructOutput;
    exp: IKillThemAll.ExpSettingStructOutput;
    multiplier: IKillThemAll.MultiplierSettingStructOutput;
    numberDigits: bigint;
  };

  export type UserLevelStruct = { min: BigNumberish; max: BigNumberish };

  export type UserLevelStructOutput = [min: bigint, max: bigint] & {
    min: bigint;
    max: bigint;
  };

  export type TownLevelStruct = { maxUser: BigNumberish };

  export type TownLevelStructOutput = [maxUser: bigint] & { maxUser: bigint };

  export type WarStruct = {
    attackerTownId: BigNumberish;
    defenderTownId: BigNumberish;
    attackableAt: Timers.BlockNumberStruct;
    expiredAt: Timers.BlockNumberStruct;
  };

  export type WarStructOutput = [
    attackerTownId: bigint,
    defenderTownId: bigint,
    attackableAt: Timers.BlockNumberStructOutput,
    expiredAt: Timers.BlockNumberStructOutput
  ] & {
    attackerTownId: bigint;
    defenderTownId: bigint;
    attackableAt: Timers.BlockNumberStructOutput;
    expiredAt: Timers.BlockNumberStructOutput;
  };

  export type GamePassStruct = {
    pass: AddressLike;
    price: BigNumberish;
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    phaseLimits: BigNumberish[];
  };

  export type GamePassStructOutput = [
    pass: string,
    price: bigint,
    startBlock: bigint,
    endBlock: bigint,
    phaseLimits: bigint[]
  ] & {
    pass: string;
    price: bigint;
    startBlock: bigint;
    endBlock: bigint;
    phaseLimits: bigint[];
  };

  export type TownStruct = {
    coordinate: Coordinates.CoordinateStruct;
    name: BytesLike;
    leader: AddressLike;
    citizens: AddressLike[];
    exp: BigNumberish;
    levelId: BigNumberish;
    price: BigNumberish;
    recruitment: boolean;
    status: BigNumberish;
    mode: BigNumberish;
    protectionAt: Timers.BlockNumberStruct;
  };

  export type TownStructOutput = [
    coordinate: Coordinates.CoordinateStructOutput,
    name: string,
    leader: string,
    citizens: string[],
    exp: bigint,
    levelId: bigint,
    price: bigint,
    recruitment: boolean,
    status: bigint,
    mode: bigint,
    protectionAt: Timers.BlockNumberStructOutput
  ] & {
    coordinate: Coordinates.CoordinateStructOutput;
    name: string;
    leader: string;
    citizens: string[];
    exp: bigint;
    levelId: bigint;
    price: bigint;
    recruitment: boolean;
    status: bigint;
    mode: bigint;
    protectionAt: Timers.BlockNumberStructOutput;
  };

  export type UserTownInfoStruct = {
    townId: BigNumberish;
    joinBlock: BigNumberish;
  };

  export type UserTownInfoStructOutput = [townId: bigint, joinBlock: bigint] & {
    townId: bigint;
    joinBlock: bigint;
  };

  export type UserTimerStruct = {
    getHealth: Timers.BlockNumberStruct;
    getMana: Timers.BlockNumberStruct;
    getEnergy: Timers.BlockNumberStruct;
    revive: Timers.BlockNumberStruct;
    teleport: Timers.BlockNumberStruct;
    teleportToTown: Timers.BlockNumberStruct;
    prepareToAttack: Timers.BlockNumberStruct;
  };

  export type UserTimerStructOutput = [
    getHealth: Timers.BlockNumberStructOutput,
    getMana: Timers.BlockNumberStructOutput,
    getEnergy: Timers.BlockNumberStructOutput,
    revive: Timers.BlockNumberStructOutput,
    teleport: Timers.BlockNumberStructOutput,
    teleportToTown: Timers.BlockNumberStructOutput,
    prepareToAttack: Timers.BlockNumberStructOutput
  ] & {
    getHealth: Timers.BlockNumberStructOutput;
    getMana: Timers.BlockNumberStructOutput;
    getEnergy: Timers.BlockNumberStructOutput;
    revive: Timers.BlockNumberStructOutput;
    teleport: Timers.BlockNumberStructOutput;
    teleportToTown: Timers.BlockNumberStructOutput;
    prepareToAttack: Timers.BlockNumberStructOutput;
  };

  export type UserCharPointStruct = {
    attack: BigNumberish;
    defend: BigNumberish;
  };

  export type UserCharPointStructOutput = [attack: bigint, defend: bigint] & {
    attack: bigint;
    defend: bigint;
  };

  export type UserStruct = {
    health: BigNumberish;
    mana: BigNumberish;
    energy: BigNumberish;
    armor: BigNumberish;
    coordinate: Coordinates.CoordinateStruct;
    name: BytesLike;
    exp: BigNumberish;
    levelId: BigNumberish;
    referrer: AddressLike;
    townInfo: IKillThemAll.UserTownInfoStruct;
    timer: IKillThemAll.UserTimerStruct;
    charPoint: IKillThemAll.UserCharPointStruct;
  };

  export type UserStructOutput = [
    health: bigint,
    mana: bigint,
    energy: bigint,
    armor: bigint,
    coordinate: Coordinates.CoordinateStructOutput,
    name: string,
    exp: bigint,
    levelId: bigint,
    referrer: string,
    townInfo: IKillThemAll.UserTownInfoStructOutput,
    timer: IKillThemAll.UserTimerStructOutput,
    charPoint: IKillThemAll.UserCharPointStructOutput
  ] & {
    health: bigint;
    mana: bigint;
    energy: bigint;
    armor: bigint;
    coordinate: Coordinates.CoordinateStructOutput;
    name: string;
    exp: bigint;
    levelId: bigint;
    referrer: string;
    townInfo: IKillThemAll.UserTownInfoStructOutput;
    timer: IKillThemAll.UserTimerStructOutput;
    charPoint: IKillThemAll.UserCharPointStructOutput;
  };
}

export declare namespace Coordinates {
  export type CoordinateStruct = { _x: BigNumberish; _y: BigNumberish };

  export type CoordinateStructOutput = [_x: bigint, _y: bigint] & {
    _x: bigint;
    _y: bigint;
  };
}

export declare namespace Timers {
  export type BlockNumberStruct = { _at: BigNumberish };

  export type BlockNumberStructOutput = [_at: bigint] & { _at: bigint };
}

export interface X_KillThemAllInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "__hh_exposed_bytecode_marker"
      | "addGamePass"
      | "attack"
      | "buy"
      | "buyGamePass"
      | "changeName"
      | "changeTownRecruitment"
      | "claimGamePassReward"
      | "createTown"
      | "createTownLevel"
      | "createUserLevel"
      | "declareWar"
      | "exileCitizen"
      | "gamePasses"
      | "get"
      | "getAddressesByCoordinate"
      | "getCitizensByTownId"
      | "isRegistered"
      | "isUserClaimedGamePassPhase"
      | "joinTown"
      | "leaveTown"
      | "move"
      | "owner"
      | "prepareToConditionBonus"
      | "register"
      | "renounceOwnership"
      | "revive"
      | "setConditionBonus"
      | "settings"
      | "settleTown"
      | "teleport"
      | "teleportToTown"
      | "townById"
      | "townIdByCoordinate"
      | "townWar"
      | "transferOwnership"
      | "typechainGenerateTown"
      | "typechainGenerateUser"
      | "updateSettings"
      | "upgradeCharacter"
      | "userByAddr"
      | "voyageTown"
      | "x_SETTINGS_PRICE_HEALTH_OFFSET"
      | "x_SETTINGS_RATE_GET_HEALTH_OFFSET"
      | "x_USER_CHAR_POINT_ATTACK_OFFSET"
      | "x_USER_TIMER_GET_HEALTH_OFFSET"
      | "x__addExpToUser"
      | "x__checkOwner"
      | "x__getAddressesByCoordinate"
      | "x__msgData"
      | "x__msgSender"
      | "x__removeUserFromTown"
      | "x__teleport"
      | "x__townWar"
      | "x__transferOwnership"
      | "x__updateCitizenshipIndexOfUser"
      | "x__updateCoordinateIndexOfUser"
      | "x_addressesByCoordinate"
      | "x_attackConditionByAddrsHash"
      | "x_charPointsByAddr"
      | "x_citizenshipIndexByAddr"
      | "x_coordinateIndexByAddr"
      | "x_defendConditionByAddrsHash"
      | "x_getRandomDigit"
      | "x_hasActiveGamePass"
      | "x_isAlive"
      | "x_isCitizen"
      | "x_isLeader"
      | "x_isSettled"
      | "x_isUserInSafe"
      | "x_isUserInSafeTownZone"
      | "x_isUserInSafeZone"
      | "x_isUserInTownZone"
      | "x_isYourself"
      | "x_sendKtaToken"
      | "x_townLevels"
      | "x_userLevels"
      | "x_warByTownId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LevelUp"
      | "OwnershipTransferred"
      | "TownCreated"
      | "TownDisbanded"
      | "TownRecruitmentUpdated"
      | "TownSettled"
      | "TownVoyaged"
      | "UserArmorBroken"
      | "UserAttacked"
      | "UserBought"
      | "UserBoughtGamePass"
      | "UserClaimedGamePassPhase"
      | "UserExitFromTown"
      | "UserGot"
      | "UserJoinedTown"
      | "UserKilled"
      | "UserMissed"
      | "UserMoved"
      | "UserPrepared"
      | "UserRegistered"
      | "WarDeclared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "__hh_exposed_bytecode_marker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addGamePass",
    values: [IKillThemAll.GamePassStruct]
  ): string;
  encodeFunctionData(functionFragment: "attack", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyGamePass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTownRecruitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimGamePassReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTown",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTownLevel",
    values: [IKillThemAll.TownLevelStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserLevel",
    values: [IKillThemAll.UserLevelStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exileCitizen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gamePasses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAddressesByCoordinate",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCitizensByTownId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserClaimedGamePassPhase",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "leaveTown", values?: undefined): string;
  encodeFunctionData(functionFragment: "move", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareToConditionBonus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConditionBonus",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settleTown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teleport",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "teleportToTown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "townById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "townIdByCoordinate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "townWar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typechainGenerateTown",
    values: [IKillThemAll.TownStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "typechainGenerateUser",
    values: [IKillThemAll.UserStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [IKillThemAll.SettingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCharacter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userByAddr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voyageTown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_SETTINGS_PRICE_HEALTH_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_SETTINGS_RATE_GET_HEALTH_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_USER_CHAR_POINT_ATTACK_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_USER_TIMER_GET_HEALTH_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x__addExpToUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "x__checkOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x__getAddressesByCoordinate",
    values: [Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "x__msgData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x__msgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x__removeUserFromTown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x__teleport",
    values: [AddressLike, Coordinates.CoordinateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "x__townWar",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "x__transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x__updateCitizenshipIndexOfUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x__updateCoordinateIndexOfUser",
    values: [
      AddressLike,
      Coordinates.CoordinateStruct,
      Coordinates.CoordinateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "x_addressesByCoordinate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "x_attackConditionByAddrsHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_charPointsByAddr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_citizenshipIndexByAddr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_coordinateIndexByAddr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_defendConditionByAddrsHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_getRandomDigit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "x_hasActiveGamePass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_isAlive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isCitizen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isLeader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isSettled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isUserInSafe",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isUserInSafeTownZone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isUserInSafeZone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isUserInTownZone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_isYourself",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "x_sendKtaToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "x_townLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_userLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "x_warByTownId",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__hh_exposed_bytecode_marker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGamePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyGamePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTownRecruitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGamePassReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTownLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "declareWar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exileCitizen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gamePasses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesByCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCitizensByTownId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserClaimedGamePassPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinTown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveTown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareToConditionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConditionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleTown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teleport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teleportToTown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "townById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "townIdByCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "townWar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typechainGenerateTown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typechainGenerateUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userByAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voyageTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "x_SETTINGS_PRICE_HEALTH_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_SETTINGS_RATE_GET_HEALTH_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_USER_CHAR_POINT_ATTACK_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_USER_TIMER_GET_HEALTH_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__addExpToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__checkOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__getAddressesByCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x__msgData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "x__msgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__removeUserFromTown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__teleport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x__townWar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "x__transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__updateCitizenshipIndexOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x__updateCoordinateIndexOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_addressesByCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_attackConditionByAddrsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_charPointsByAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_citizenshipIndexByAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_coordinateIndexByAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_defendConditionByAddrsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_getRandomDigit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_hasActiveGamePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x_isAlive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "x_isCitizen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x_isLeader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "x_isSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_isUserInSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_isUserInSafeTownZone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_isUserInSafeZone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_isUserInTownZone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_isYourself",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_sendKtaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_townLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_userLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "x_warByTownId",
    data: BytesLike
  ): Result;
}

export namespace LevelUpEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownCreatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownDisbandedEvent {
  export type InputTuple = [townId: BigNumberish];
  export type OutputTuple = [townId: bigint];
  export interface OutputObject {
    townId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownRecruitmentUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownSettledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TownVoyagedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserArmorBrokenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserAttackedEvent {
  export type InputTuple = [
    defender: AddressLike,
    healthDamage: BigNumberish,
    armorDamage: BigNumberish
  ];
  export type OutputTuple = [
    defender: string,
    healthDamage: bigint,
    armorDamage: bigint
  ];
  export interface OutputObject {
    defender: string;
    healthDamage: bigint;
    armorDamage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBoughtEvent {
  export type InputTuple = [
    something: BigNumberish,
    to: AddressLike,
    amount: BigNumberish,
    buyer: AddressLike
  ];
  export type OutputTuple = [
    something: bigint,
    to: string,
    amount: bigint,
    buyer: string
  ];
  export interface OutputObject {
    something: bigint;
    to: string;
    amount: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBoughtGamePassEvent {
  export type InputTuple = [gamePassId: BigNumberish];
  export type OutputTuple = [gamePassId: bigint];
  export interface OutputObject {
    gamePassId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserClaimedGamePassPhaseEvent {
  export type InputTuple = [
    gamePassId: BigNumberish,
    gamePassPhase: BigNumberish
  ];
  export type OutputTuple = [gamePassId: bigint, gamePassPhase: bigint];
  export interface OutputObject {
    gamePassId: bigint;
    gamePassPhase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserExitFromTownEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserGotEvent {
  export type InputTuple = [something: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [something: bigint, amount: bigint];
  export interface OutputObject {
    something: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserJoinedTownEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserKilledEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserMissedEvent {
  export type InputTuple = [defender: AddressLike];
  export type OutputTuple = [defender: string];
  export interface OutputObject {
    defender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserMovedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldCoordinate: Coordinates.CoordinateStruct,
    newCoordinate: Coordinates.CoordinateStruct
  ];
  export type OutputTuple = [
    user: string,
    oldCoordinate: Coordinates.CoordinateStructOutput,
    newCoordinate: Coordinates.CoordinateStructOutput
  ];
  export interface OutputObject {
    user: string;
    oldCoordinate: Coordinates.CoordinateStructOutput;
    newCoordinate: Coordinates.CoordinateStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserPreparedEvent {
  export type InputTuple = [to: BigNumberish, addressesHash: BytesLike];
  export type OutputTuple = [to: bigint, addressesHash: string];
  export interface OutputObject {
    to: bigint;
    addressesHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WarDeclaredEvent {
  export type InputTuple = [war: IKillThemAll.WarStruct];
  export type OutputTuple = [war: IKillThemAll.WarStructOutput];
  export interface OutputObject {
    war: IKillThemAll.WarStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface X_KillThemAll extends BaseContract {
  contractName: "X_KillThemAll";

  connect(runner?: ContractRunner | null): X_KillThemAll;
  waitForDeployment(): Promise<this>;

  interface: X_KillThemAllInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  __hh_exposed_bytecode_marker: TypedContractMethod<[], [string], "view">;

  addGamePass: TypedContractMethod<
    [gamePass: IKillThemAll.GamePassStruct],
    [void],
    "nonpayable"
  >;

  attack: TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  buy: TypedContractMethod<
    [buy_: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyGamePass: TypedContractMethod<[], [void], "nonpayable">;

  changeName: TypedContractMethod<[name: BytesLike], [void], "nonpayable">;

  changeTownRecruitment: TypedContractMethod<[], [void], "nonpayable">;

  claimGamePassReward: TypedContractMethod<
    [phase: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTown: TypedContractMethod<
    [name: BytesLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTownLevel: TypedContractMethod<
    [townLevel: IKillThemAll.TownLevelStruct],
    [void],
    "nonpayable"
  >;

  createUserLevel: TypedContractMethod<
    [userLevel: IKillThemAll.UserLevelStruct],
    [void],
    "nonpayable"
  >;

  declareWar: TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;

  exileCitizen: TypedContractMethod<
    [citizen: AddressLike],
    [void],
    "nonpayable"
  >;

  gamePasses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        pass: string;
        price: bigint;
        startBlock: bigint;
        endBlock: bigint;
      }
    ],
    "view"
  >;

  get: TypedContractMethod<[get_: BigNumberish], [void], "nonpayable">;

  getAddressesByCoordinate: TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;

  getCitizensByTownId: TypedContractMethod<
    [townId: BigNumberish],
    [string[]],
    "view"
  >;

  isRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isUserClaimedGamePassPhase: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  joinTown: TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;

  leaveTown: TypedContractMethod<[], [void], "nonpayable">;

  move: TypedContractMethod<[direction: BigNumberish], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  prepareToConditionBonus: TypedContractMethod<
    [to: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<
    [name: BytesLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revive: TypedContractMethod<[], [void], "nonpayable">;

  setConditionBonus: TypedContractMethod<
    [to: BigNumberish, addressesHash: BytesLike, random: BigNumberish],
    [void],
    "nonpayable"
  >;

  settings: TypedContractMethod<
    [],
    [
      [
        IKillThemAll.MaxSettingStructOutput,
        IKillThemAll.PriceSettingStructOutput,
        IKillThemAll.RateSettingStructOutput,
        IKillThemAll.TimeSettingStructOutput,
        IKillThemAll.MinSettingStructOutput,
        IKillThemAll.ExpSettingStructOutput,
        IKillThemAll.MultiplierSettingStructOutput,
        bigint
      ] & {
        max: IKillThemAll.MaxSettingStructOutput;
        price: IKillThemAll.PriceSettingStructOutput;
        rate: IKillThemAll.RateSettingStructOutput;
        time: IKillThemAll.TimeSettingStructOutput;
        min: IKillThemAll.MinSettingStructOutput;
        exp: IKillThemAll.ExpSettingStructOutput;
        multiplier: IKillThemAll.MultiplierSettingStructOutput;
        numberDigits: bigint;
      }
    ],
    "view"
  >;

  settleTown: TypedContractMethod<[], [void], "nonpayable">;

  teleport: TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;

  teleportToTown: TypedContractMethod<[], [void], "nonpayable">;

  townById: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Coordinates.CoordinateStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        Timers.BlockNumberStructOutput
      ] & {
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        leader: string;
        exp: bigint;
        levelId: bigint;
        price: bigint;
        recruitment: boolean;
        status: bigint;
        mode: bigint;
        protectionAt: Timers.BlockNumberStructOutput;
      }
    ],
    "view"
  >;

  townIdByCoordinate: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  townWar: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  typechainGenerateTown: TypedContractMethod<
    [town: IKillThemAll.TownStruct],
    [void],
    "nonpayable"
  >;

  typechainGenerateUser: TypedContractMethod<
    [user: IKillThemAll.UserStruct],
    [void],
    "nonpayable"
  >;

  updateSettings: TypedContractMethod<
    [settings_: IKillThemAll.SettingStruct],
    [void],
    "nonpayable"
  >;

  upgradeCharacter: TypedContractMethod<
    [charInfo: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userByAddr: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;

  voyageTown: TypedContractMethod<[], [void], "nonpayable">;

  x_SETTINGS_PRICE_HEALTH_OFFSET: TypedContractMethod<[], [bigint], "view">;

  x_SETTINGS_RATE_GET_HEALTH_OFFSET: TypedContractMethod<[], [bigint], "view">;

  x_USER_CHAR_POINT_ATTACK_OFFSET: TypedContractMethod<[], [bigint], "view">;

  x_USER_TIMER_GET_HEALTH_OFFSET: TypedContractMethod<[], [bigint], "view">;

  x__addExpToUser: TypedContractMethod<
    [user_: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  x__checkOwner: TypedContractMethod<[], [void], "view">;

  x__getAddressesByCoordinate: TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;

  x__msgData: TypedContractMethod<[], [string], "view">;

  x__msgSender: TypedContractMethod<[], [string], "view">;

  x__removeUserFromTown: TypedContractMethod<
    [user_: AddressLike],
    [void],
    "nonpayable"
  >;

  x__teleport: TypedContractMethod<
    [user_: AddressLike, coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;

  x__townWar: TypedContractMethod<
    [attackers: AddressLike[], defenders: AddressLike[]],
    [[bigint, bigint] & { ret0: bigint; ret1: bigint }],
    "view"
  >;

  x__transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  x__updateCitizenshipIndexOfUser: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  x__updateCoordinateIndexOfUser: TypedContractMethod<
    [
      user: AddressLike,
      oldCoordinate: Coordinates.CoordinateStruct,
      newCoordinate: Coordinates.CoordinateStruct
    ],
    [void],
    "nonpayable"
  >;

  x_addressesByCoordinate: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string[]],
    "view"
  >;

  x_attackConditionByAddrsHash: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  x_charPointsByAddr: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  x_citizenshipIndexByAddr: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  x_coordinateIndexByAddr: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  x_defendConditionByAddrsHash: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  x_getRandomDigit: TypedContractMethod<
    [random: BigNumberish],
    [bigint],
    "view"
  >;

  x_hasActiveGamePass: TypedContractMethod<[], [boolean], "view">;

  x_isAlive: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  x_isCitizen: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  x_isLeader: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  x_isSettled: TypedContractMethod<[townId: BigNumberish], [boolean], "view">;

  x_isUserInSafe: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  x_isUserInSafeTownZone: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  x_isUserInSafeZone: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  x_isUserInTownZone: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  x_isYourself: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  x_sendKtaToken: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  x_townLevels: TypedContractMethod<
    [],
    [IKillThemAll.TownLevelStructOutput[]],
    "view"
  >;

  x_userLevels: TypedContractMethod<
    [],
    [IKillThemAll.UserLevelStructOutput[]],
    "view"
  >;

  x_warByTownId: TypedContractMethod<
    [arg0: BigNumberish],
    [IKillThemAll.WarStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "__hh_exposed_bytecode_marker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addGamePass"
  ): TypedContractMethod<
    [gamePass: IKillThemAll.GamePassStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attack"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [buy_: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyGamePass"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeName"
  ): TypedContractMethod<[name: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTownRecruitment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimGamePassReward"
  ): TypedContractMethod<[phase: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTown"
  ): TypedContractMethod<
    [name: BytesLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTownLevel"
  ): TypedContractMethod<
    [townLevel: IKillThemAll.TownLevelStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserLevel"
  ): TypedContractMethod<
    [userLevel: IKillThemAll.UserLevelStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declareWar"
  ): TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exileCitizen"
  ): TypedContractMethod<[citizen: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gamePasses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        pass: string;
        price: bigint;
        startBlock: bigint;
        endBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[get_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAddressesByCoordinate"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCitizensByTownId"
  ): TypedContractMethod<[townId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserClaimedGamePassPhase"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinTown"
  ): TypedContractMethod<[townId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leaveTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<[direction: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prepareToConditionBonus"
  ): TypedContractMethod<
    [to: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [name: BytesLike, referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revive"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConditionBonus"
  ): TypedContractMethod<
    [to: BigNumberish, addressesHash: BytesLike, random: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settings"
  ): TypedContractMethod<
    [],
    [
      [
        IKillThemAll.MaxSettingStructOutput,
        IKillThemAll.PriceSettingStructOutput,
        IKillThemAll.RateSettingStructOutput,
        IKillThemAll.TimeSettingStructOutput,
        IKillThemAll.MinSettingStructOutput,
        IKillThemAll.ExpSettingStructOutput,
        IKillThemAll.MultiplierSettingStructOutput,
        bigint
      ] & {
        max: IKillThemAll.MaxSettingStructOutput;
        price: IKillThemAll.PriceSettingStructOutput;
        rate: IKillThemAll.RateSettingStructOutput;
        time: IKillThemAll.TimeSettingStructOutput;
        min: IKillThemAll.MinSettingStructOutput;
        exp: IKillThemAll.ExpSettingStructOutput;
        multiplier: IKillThemAll.MultiplierSettingStructOutput;
        numberDigits: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "settleTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teleport"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "teleportToTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "townById"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Coordinates.CoordinateStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        Timers.BlockNumberStructOutput
      ] & {
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        leader: string;
        exp: bigint;
        levelId: bigint;
        price: bigint;
        recruitment: boolean;
        status: bigint;
        mode: bigint;
        protectionAt: Timers.BlockNumberStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "townIdByCoordinate"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "townWar"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typechainGenerateTown"
  ): TypedContractMethod<[town: IKillThemAll.TownStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typechainGenerateUser"
  ): TypedContractMethod<[user: IKillThemAll.UserStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSettings"
  ): TypedContractMethod<
    [settings_: IKillThemAll.SettingStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeCharacter"
  ): TypedContractMethod<
    [charInfo: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userByAddr"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        Coordinates.CoordinateStructOutput,
        string,
        bigint,
        bigint,
        string,
        IKillThemAll.UserTownInfoStructOutput,
        IKillThemAll.UserTimerStructOutput,
        IKillThemAll.UserCharPointStructOutput
      ] & {
        health: bigint;
        mana: bigint;
        energy: bigint;
        armor: bigint;
        coordinate: Coordinates.CoordinateStructOutput;
        name: string;
        exp: bigint;
        levelId: bigint;
        referrer: string;
        townInfo: IKillThemAll.UserTownInfoStructOutput;
        timer: IKillThemAll.UserTimerStructOutput;
        charPoint: IKillThemAll.UserCharPointStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "voyageTown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "x_SETTINGS_PRICE_HEALTH_OFFSET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_SETTINGS_RATE_GET_HEALTH_OFFSET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_USER_CHAR_POINT_ATTACK_OFFSET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_USER_TIMER_GET_HEALTH_OFFSET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "x__addExpToUser"
  ): TypedContractMethod<
    [user_: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "x__checkOwner"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "x__getAddressesByCoordinate"
  ): TypedContractMethod<
    [coordinate: Coordinates.CoordinateStruct],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "x__msgData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "x__msgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "x__removeUserFromTown"
  ): TypedContractMethod<[user_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "x__teleport"
  ): TypedContractMethod<
    [user_: AddressLike, coordinate: Coordinates.CoordinateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "x__townWar"
  ): TypedContractMethod<
    [attackers: AddressLike[], defenders: AddressLike[]],
    [[bigint, bigint] & { ret0: bigint; ret1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "x__transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "x__updateCitizenshipIndexOfUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "x__updateCoordinateIndexOfUser"
  ): TypedContractMethod<
    [
      user: AddressLike,
      oldCoordinate: Coordinates.CoordinateStruct,
      newCoordinate: Coordinates.CoordinateStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "x_addressesByCoordinate"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "x_attackConditionByAddrsHash"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_charPointsByAddr"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_citizenshipIndexByAddr"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_coordinateIndexByAddr"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_defendConditionByAddrsHash"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_getRandomDigit"
  ): TypedContractMethod<[random: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "x_hasActiveGamePass"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isAlive"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isCitizen"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isLeader"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isSettled"
  ): TypedContractMethod<[townId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isUserInSafe"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isUserInSafeTownZone"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isUserInSafeZone"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isUserInTownZone"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_isYourself"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "x_sendKtaToken"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "x_townLevels"
  ): TypedContractMethod<[], [IKillThemAll.TownLevelStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "x_userLevels"
  ): TypedContractMethod<[], [IKillThemAll.UserLevelStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "x_warByTownId"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [IKillThemAll.WarStructOutput],
    "view"
  >;

  getEvent(
    key: "LevelUp"
  ): TypedContractEvent<
    LevelUpEvent.InputTuple,
    LevelUpEvent.OutputTuple,
    LevelUpEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TownCreated"
  ): TypedContractEvent<
    TownCreatedEvent.InputTuple,
    TownCreatedEvent.OutputTuple,
    TownCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TownDisbanded"
  ): TypedContractEvent<
    TownDisbandedEvent.InputTuple,
    TownDisbandedEvent.OutputTuple,
    TownDisbandedEvent.OutputObject
  >;
  getEvent(
    key: "TownRecruitmentUpdated"
  ): TypedContractEvent<
    TownRecruitmentUpdatedEvent.InputTuple,
    TownRecruitmentUpdatedEvent.OutputTuple,
    TownRecruitmentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TownSettled"
  ): TypedContractEvent<
    TownSettledEvent.InputTuple,
    TownSettledEvent.OutputTuple,
    TownSettledEvent.OutputObject
  >;
  getEvent(
    key: "TownVoyaged"
  ): TypedContractEvent<
    TownVoyagedEvent.InputTuple,
    TownVoyagedEvent.OutputTuple,
    TownVoyagedEvent.OutputObject
  >;
  getEvent(
    key: "UserArmorBroken"
  ): TypedContractEvent<
    UserArmorBrokenEvent.InputTuple,
    UserArmorBrokenEvent.OutputTuple,
    UserArmorBrokenEvent.OutputObject
  >;
  getEvent(
    key: "UserAttacked"
  ): TypedContractEvent<
    UserAttackedEvent.InputTuple,
    UserAttackedEvent.OutputTuple,
    UserAttackedEvent.OutputObject
  >;
  getEvent(
    key: "UserBought"
  ): TypedContractEvent<
    UserBoughtEvent.InputTuple,
    UserBoughtEvent.OutputTuple,
    UserBoughtEvent.OutputObject
  >;
  getEvent(
    key: "UserBoughtGamePass"
  ): TypedContractEvent<
    UserBoughtGamePassEvent.InputTuple,
    UserBoughtGamePassEvent.OutputTuple,
    UserBoughtGamePassEvent.OutputObject
  >;
  getEvent(
    key: "UserClaimedGamePassPhase"
  ): TypedContractEvent<
    UserClaimedGamePassPhaseEvent.InputTuple,
    UserClaimedGamePassPhaseEvent.OutputTuple,
    UserClaimedGamePassPhaseEvent.OutputObject
  >;
  getEvent(
    key: "UserExitFromTown"
  ): TypedContractEvent<
    UserExitFromTownEvent.InputTuple,
    UserExitFromTownEvent.OutputTuple,
    UserExitFromTownEvent.OutputObject
  >;
  getEvent(
    key: "UserGot"
  ): TypedContractEvent<
    UserGotEvent.InputTuple,
    UserGotEvent.OutputTuple,
    UserGotEvent.OutputObject
  >;
  getEvent(
    key: "UserJoinedTown"
  ): TypedContractEvent<
    UserJoinedTownEvent.InputTuple,
    UserJoinedTownEvent.OutputTuple,
    UserJoinedTownEvent.OutputObject
  >;
  getEvent(
    key: "UserKilled"
  ): TypedContractEvent<
    UserKilledEvent.InputTuple,
    UserKilledEvent.OutputTuple,
    UserKilledEvent.OutputObject
  >;
  getEvent(
    key: "UserMissed"
  ): TypedContractEvent<
    UserMissedEvent.InputTuple,
    UserMissedEvent.OutputTuple,
    UserMissedEvent.OutputObject
  >;
  getEvent(
    key: "UserMoved"
  ): TypedContractEvent<
    UserMovedEvent.InputTuple,
    UserMovedEvent.OutputTuple,
    UserMovedEvent.OutputObject
  >;
  getEvent(
    key: "UserPrepared"
  ): TypedContractEvent<
    UserPreparedEvent.InputTuple,
    UserPreparedEvent.OutputTuple,
    UserPreparedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WarDeclared"
  ): TypedContractEvent<
    WarDeclaredEvent.InputTuple,
    WarDeclaredEvent.OutputTuple,
    WarDeclaredEvent.OutputObject
  >;

  filters: {
    "LevelUp(address)": TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;
    LevelUp: TypedContractEvent<
      LevelUpEvent.InputTuple,
      LevelUpEvent.OutputTuple,
      LevelUpEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TownCreated()": TypedContractEvent<
      TownCreatedEvent.InputTuple,
      TownCreatedEvent.OutputTuple,
      TownCreatedEvent.OutputObject
    >;
    TownCreated: TypedContractEvent<
      TownCreatedEvent.InputTuple,
      TownCreatedEvent.OutputTuple,
      TownCreatedEvent.OutputObject
    >;

    "TownDisbanded(uint256)": TypedContractEvent<
      TownDisbandedEvent.InputTuple,
      TownDisbandedEvent.OutputTuple,
      TownDisbandedEvent.OutputObject
    >;
    TownDisbanded: TypedContractEvent<
      TownDisbandedEvent.InputTuple,
      TownDisbandedEvent.OutputTuple,
      TownDisbandedEvent.OutputObject
    >;

    "TownRecruitmentUpdated()": TypedContractEvent<
      TownRecruitmentUpdatedEvent.InputTuple,
      TownRecruitmentUpdatedEvent.OutputTuple,
      TownRecruitmentUpdatedEvent.OutputObject
    >;
    TownRecruitmentUpdated: TypedContractEvent<
      TownRecruitmentUpdatedEvent.InputTuple,
      TownRecruitmentUpdatedEvent.OutputTuple,
      TownRecruitmentUpdatedEvent.OutputObject
    >;

    "TownSettled()": TypedContractEvent<
      TownSettledEvent.InputTuple,
      TownSettledEvent.OutputTuple,
      TownSettledEvent.OutputObject
    >;
    TownSettled: TypedContractEvent<
      TownSettledEvent.InputTuple,
      TownSettledEvent.OutputTuple,
      TownSettledEvent.OutputObject
    >;

    "TownVoyaged()": TypedContractEvent<
      TownVoyagedEvent.InputTuple,
      TownVoyagedEvent.OutputTuple,
      TownVoyagedEvent.OutputObject
    >;
    TownVoyaged: TypedContractEvent<
      TownVoyagedEvent.InputTuple,
      TownVoyagedEvent.OutputTuple,
      TownVoyagedEvent.OutputObject
    >;

    "UserArmorBroken()": TypedContractEvent<
      UserArmorBrokenEvent.InputTuple,
      UserArmorBrokenEvent.OutputTuple,
      UserArmorBrokenEvent.OutputObject
    >;
    UserArmorBroken: TypedContractEvent<
      UserArmorBrokenEvent.InputTuple,
      UserArmorBrokenEvent.OutputTuple,
      UserArmorBrokenEvent.OutputObject
    >;

    "UserAttacked(address,uint256,uint256)": TypedContractEvent<
      UserAttackedEvent.InputTuple,
      UserAttackedEvent.OutputTuple,
      UserAttackedEvent.OutputObject
    >;
    UserAttacked: TypedContractEvent<
      UserAttackedEvent.InputTuple,
      UserAttackedEvent.OutputTuple,
      UserAttackedEvent.OutputObject
    >;

    "UserBought(uint8,address,uint256,address)": TypedContractEvent<
      UserBoughtEvent.InputTuple,
      UserBoughtEvent.OutputTuple,
      UserBoughtEvent.OutputObject
    >;
    UserBought: TypedContractEvent<
      UserBoughtEvent.InputTuple,
      UserBoughtEvent.OutputTuple,
      UserBoughtEvent.OutputObject
    >;

    "UserBoughtGamePass(uint256)": TypedContractEvent<
      UserBoughtGamePassEvent.InputTuple,
      UserBoughtGamePassEvent.OutputTuple,
      UserBoughtGamePassEvent.OutputObject
    >;
    UserBoughtGamePass: TypedContractEvent<
      UserBoughtGamePassEvent.InputTuple,
      UserBoughtGamePassEvent.OutputTuple,
      UserBoughtGamePassEvent.OutputObject
    >;

    "UserClaimedGamePassPhase(uint256,uint256)": TypedContractEvent<
      UserClaimedGamePassPhaseEvent.InputTuple,
      UserClaimedGamePassPhaseEvent.OutputTuple,
      UserClaimedGamePassPhaseEvent.OutputObject
    >;
    UserClaimedGamePassPhase: TypedContractEvent<
      UserClaimedGamePassPhaseEvent.InputTuple,
      UserClaimedGamePassPhaseEvent.OutputTuple,
      UserClaimedGamePassPhaseEvent.OutputObject
    >;

    "UserExitFromTown(address)": TypedContractEvent<
      UserExitFromTownEvent.InputTuple,
      UserExitFromTownEvent.OutputTuple,
      UserExitFromTownEvent.OutputObject
    >;
    UserExitFromTown: TypedContractEvent<
      UserExitFromTownEvent.InputTuple,
      UserExitFromTownEvent.OutputTuple,
      UserExitFromTownEvent.OutputObject
    >;

    "UserGot(uint8,uint256)": TypedContractEvent<
      UserGotEvent.InputTuple,
      UserGotEvent.OutputTuple,
      UserGotEvent.OutputObject
    >;
    UserGot: TypedContractEvent<
      UserGotEvent.InputTuple,
      UserGotEvent.OutputTuple,
      UserGotEvent.OutputObject
    >;

    "UserJoinedTown()": TypedContractEvent<
      UserJoinedTownEvent.InputTuple,
      UserJoinedTownEvent.OutputTuple,
      UserJoinedTownEvent.OutputObject
    >;
    UserJoinedTown: TypedContractEvent<
      UserJoinedTownEvent.InputTuple,
      UserJoinedTownEvent.OutputTuple,
      UserJoinedTownEvent.OutputObject
    >;

    "UserKilled(address)": TypedContractEvent<
      UserKilledEvent.InputTuple,
      UserKilledEvent.OutputTuple,
      UserKilledEvent.OutputObject
    >;
    UserKilled: TypedContractEvent<
      UserKilledEvent.InputTuple,
      UserKilledEvent.OutputTuple,
      UserKilledEvent.OutputObject
    >;

    "UserMissed(address)": TypedContractEvent<
      UserMissedEvent.InputTuple,
      UserMissedEvent.OutputTuple,
      UserMissedEvent.OutputObject
    >;
    UserMissed: TypedContractEvent<
      UserMissedEvent.InputTuple,
      UserMissedEvent.OutputTuple,
      UserMissedEvent.OutputObject
    >;

    "UserMoved(address,tuple,tuple)": TypedContractEvent<
      UserMovedEvent.InputTuple,
      UserMovedEvent.OutputTuple,
      UserMovedEvent.OutputObject
    >;
    UserMoved: TypedContractEvent<
      UserMovedEvent.InputTuple,
      UserMovedEvent.OutputTuple,
      UserMovedEvent.OutputObject
    >;

    "UserPrepared(uint8,bytes32)": TypedContractEvent<
      UserPreparedEvent.InputTuple,
      UserPreparedEvent.OutputTuple,
      UserPreparedEvent.OutputObject
    >;
    UserPrepared: TypedContractEvent<
      UserPreparedEvent.InputTuple,
      UserPreparedEvent.OutputTuple,
      UserPreparedEvent.OutputObject
    >;

    "UserRegistered()": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "WarDeclared(tuple)": TypedContractEvent<
      WarDeclaredEvent.InputTuple,
      WarDeclaredEvent.OutputTuple,
      WarDeclaredEvent.OutputObject
    >;
    WarDeclared: TypedContractEvent<
      WarDeclaredEvent.InputTuple,
      WarDeclaredEvent.OutputTuple,
      WarDeclaredEvent.OutputObject
    >;
  };
}
